**  Crear un proyecto nuevo de nest

- Eliminar las referencias a prettier para que no muestre las advertencias y errores

yarn remove prettier

yarn remove eslint-config-prettier eslint-plugin-prettier

- Crear un html llamado index
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./css/style.css">
</head>
<body>

    <h1>Este es mi sitio web</h1>
    
</body>
</html>

- Crear un css

html,body{

    padding: 20px;
    background-color: grey;

}

h1{

    font-size: 20px;
    color: red;

}

- Instalar este paquete para servir contenido estatico

yarn add @nestjs/serve-static

- Agregar esta linea de codigo en el app modulo para importar 

 ServeStaticModule.forRoot({
      rootPath: join(__dirname,'..','public'),
      }) 

** Descargar DockerCompose

- Instalar Docker Desktop

https://docs.docker.com/desktop/install/windows-install/https://docs.docker.com/desktop/install/windows-install/

- Actualizar el kernel

wsl --update

- Crear un archivo en el root de la aplicacion

docker-compose.yaml


version: '3'

services:
  db:
    image: mongo:5
    restart: always
    ports: 
     - 27017:27017
    environment:
      MONGODB_DATABASE: nest-pokemon 
    volumes:
      - ./mongo:/data/db  


- Correr este comando para crear la imagen

docker-compose up -d

esto crea una carpeta mongo con los archivos que necesita para la creacion

- Abrir el docker desktop observaremos el√± contendeor llamado  pokedex y  la base de dato creada 


-- Instalar table plus para conectarnos a la base de datos

-- Conectarnos con la base de datos

mongodb://localhost:27017/nest-pokemon


Siempre se debe levantar el servicio de la base de datos

** Conectar nest con Mongo

https://docs.nestjs.com/techniques/mongodb

yarn add @nestjs/mongoose mongoose

Importar Moongose en  el app module

import { Module } from '@nestjs/common';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';
import { PokemonModule } from './pokemon/pokemon.module';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  imports: [

    ServeStaticModule.forRoot({
      rootPath: join(__dirname,'..','public'),
      }),

      MongooseModule.forRoot('mongodb://localhost:27701/nest-pokemon'),
    PokemonModule
  ],
})
export class AppModule {}


** Creando esquemas  y modelos

- Crear la entidad - entities dentro de pokemon

import { Prop, Schema, SchemaFactory } from "@nestjs/mongoose";
import { Document } from "mongoose";

// Extiende de Document de monggose
// Se debe colocar el decorador de squema de mongo
@Schema()
export class Pokemon  extends Document{

    // El ID no se especifica porque
    // Mongo lo da
    @Prop({
        unique:true,
        index: true

    })	
    name:string;

    @Prop({
        unique:true,
        index: true

    })
    no: number;
}
export const PokemonSchema = SchemaFactory.createForClass( Pokemon);

- Realizar la importacion dentro del modulo de pokemon

import { Module } from '@nestjs/common';
import { PokemonService } from './pokemon.service';
import { PokemonController } from './pokemon.controller';
import { Pokemon, PokemonSchema } from './entities/pokemon.entity';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  controllers: [PokemonController],
  providers: [PokemonService],
  imports: [
    MongooseModule.forFeature([
      {
        name: Pokemon.name,
        schema: PokemonSchema
      }
    ])
  ]
})
export class PokemonModule {}


** Recibir y validar la data

- Instalar class validetor y transformer

yarn add class-validator class-transformer

- Agregamos la validacion global

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);


  // De esta manera podemos colocar un prefijo para las api
  // Se consumiria asi http://localhost:3000/api/v2/pokemon
  app.setGlobalPrefix('api/v2');


  // Para trabajar con los pipes de class validatir
  app.useGlobalPipes(
    new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    })
    );


  await app.listen(3000);
}
bootstrap();



- Agregamos la validacion en el DTO de crear, porque actualizar extiende de el
import { IsInt, IsPositive, IsString, Min, MinLength } from "class-validator";

export class CreatePokemonDto {

    @IsInt()
    @IsPositive()
    @Min(1)
    no:number;


    @IsString()
    @MinLength(1)
    name: string;

}


Al realizar el consumo en postman observaremos que las validaciones si estan funcionando


-  podemos returnar el objeto para verlo

  create(createPokemonDto: CreatePokemonDto) {
    return  createPokemonDto ;
  }


**  Como crear el pokemon en la base de datos

- Imyectamos el modelo en el servicio de pokemon

import { Injectable } from '@nestjs/common';
import { CreatePokemonDto } from './dto/create-pokemon.dto';
import { UpdatePokemonDto } from './dto/update-pokemon.dto';
import { Pokemon } from './entities/pokemon.entity';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';

@Injectable()
export class PokemonService {

  // Inyectar en el contructor el provider de mongoose para crear el modelo
  constructor(
    @InjectModel(Pokemon.name)
    private readonly pokemonModel: Model<Pokemon>
  ){}

  create(createPokemonDto: CreatePokemonDto) {

    createPokemonDto.name = createPokemonDto.name.toLocaleLowerCase();

    return  createPokemonDto ;
  }

  findAll() {
    return `This action returns all pokemon`;
  }

  findOne(id: number) {
    return `This action returns a #${id} pokemon`;
  }

  update(id: number, updatePokemonDto: UpdatePokemonDto) {
    return `This action updates a #${id} pokemon`;
  }

  remove(id: number) {
    return `This action removes a #${id} pokemon`;
  }
}


-  Utilizamos el metodo post del servicio de pokemon para realizar la insercion en la base de datos


  async create(createPokemonDto: CreatePokemonDto) {

    createPokemonDto.name = createPokemonDto.name.toLocaleLowerCase();

    const pokemon = await this.pokemonModel.create(createPokemonDto);

    return  pokemon ;
  }

- Podemos ver el registro en la base de datos


** Codigo de errores

https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

Agregar un try catch al metodo de crear en el servicio y utilizar BadRequestException

 async create(createPokemonDto: CreatePokemonDto) {

    createPokemonDto.name = createPokemonDto.name.toLocaleLowerCase();
       
        try {
          
          const pokemon = await this.pokemonModel.create(createPokemonDto);

          return  pokemon ;
        } catch (error) {
    
          //console.log(error);
          if (error.code === 11000) {

            // Lanzamos un error que indica cual valor o campos estan duplicado
            throw new BadRequestException(
              `Pokemon exists in db ${JSON.stringify(error.keyValue)}`,
            );
          } else {
            throw new InternalServerErrorException(
              `Cant't create Pokemon - Check server logs`,
            );
          } 
        }  
  }


** Indicar el codigo que queremos con el decorador de HttpCode en el controlador

  @Post()
  @HttpCode(HttpStatus.OK)
  create(@Body() createPokemonDto: CreatePokemonDto) {
    return this.pokemonService.create(createPokemonDto);
  }

Con esta opcion, dandole click en al HttpStatus podramos ver la traduccion de los codigos


** FindOneBy => Consultar un pokemon especifico

Controlador

  @Get(':term')
  findOne(@Param('term') term: string) {
    return this.pokemonService.findOne(term);
  }


Servicio
 async findOne(term: string) {
    let pokemon: Pokemon;

    // Busqueda pornumero => Validar si es un numero y realizar la busqueda
    if (!isNaN(+term)) {
      pokemon = await this.pokemonModel.findOne({ no: term });
    }

    // Buscar por el MongoID si no encontro en la busqueda anterior
    if( !pokemon && isValidObjectId(term)){
      pokemon = await this.pokemonModel.findById(term);
    }

    // Si no se ha encontrado con las opciones anterior, buscamos por el nombre
    if(!pokemon){
      pokemon = await this.pokemonModel.findOne({ name: term.toLocaleLowerCase().trim() });
    }


    // Lanzamos una exception si el pokemon no se encuentra
    if (!pokemon)
      throw new NotFoundException(
        `Pokemon with id, name or no "${term}" nto found`,
      );

    return pokemon;
  }

** Actualizar

cONTROLADOR

  @Patch(':term')
  update(@Param('term') term: string, @Body() updatePokemonDto: UpdatePokemonDto) {
    return this.pokemonService.update(term, updatePokemonDto);
  }

Servicio

  async update(term: string, updatePokemonDto: UpdatePokemonDto) {
    // Buscamos si existe el pokemon reutilizando el metodo de busqueda anterior
    const pokemon = await this.findOne(term);

    // Si con la busqueda anterior encuentra el pokemon pasara a este metodo

    // Pasamos el nombre en minuscula
    if (updatePokemonDto.name) {
      updatePokemonDto.name = updatePokemonDto.name.toLocaleLowerCase();
    }

    try {
      //grabar en base de datos
      await pokemon.updateOne(updatePokemonDto, { new: true });

      // Sobre escribo el pokemon con el objeto que recibimos en el body, ya que seguramente paso
      // Todas las validaciones anterior
      return { ...pokemon.toJSON(), ...updatePokemonDto };
    } catch (error) {
      if (error.code === 11000) {
        // Lanzamos un error que indica cual valor o campos estan duplicado
        throw new BadRequestException(
          `Pokemon exists in db ${JSON.stringify(error.keyValue)}`,
        );
      } else {
        throw new InternalServerErrorException(
          `Cant't create Pokemon - Check server logs`,
        );
      }
    }
  }


** Crear un metodo para manejo de errores

 private handleException(error: any) {
    if (error.code === 11000) {
      // Lanzamos un error que indica cual valor o campos estan duplicado
      throw new BadRequestException(
        `Pokemon exists in db ${JSON.stringify(error.keyValue)}`,
      );
    } else {
      throw new InternalServerErrorException(
        `Cant't create Pokemon - Check server logs`,
      );
    }
  }

** Agregamos la invocacion del metodo en donde queremos utilizarlo

 async create(createPokemonDto: CreatePokemonDto) {
    createPokemonDto.name = createPokemonDto.name.toLocaleLowerCase();

    try {
      const pokemon = await this.pokemonModel.create(createPokemonDto);

      return pokemon;
    } catch (error) {
      this.handleException(error);
    }
  }

** Delete

Controlador

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.pokemonService.remove(id);
  }

Servicio



