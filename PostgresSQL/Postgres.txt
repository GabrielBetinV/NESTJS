7AQX<** ORM

https://www.google.com/search?q=orm&oq=orm&aqs=chrome..69i57l2j69i59j69i60.642j0j7&sourceid=chrome&ie=UTF-8

- TYPEORM

https://typeorm.io/

- Crear una aplicacion de nest

nest new teslo-shop

** Instalar Docker

- Crear un archivo .env y colocar las credenciales para la base de datos

DB_PASSWORD=MySecr3etPassword@as2
DB_NAME=TesloDB

- Crear el archivo docker-compose.yaml con la siguiente config

version: '3'


services:
  db:
    image: postgres:14.3
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}  
      POSTGRES_DB: ${DB_NAME}
    container_name: teslodb
    volumes:
      - ./postgres:/var/lib/postgresql/data  

- Levantar la base de dato 

docker-compose up 

si no tiene el -d, hace que que si bajo la aplicacion backend tambien se baja el contenedor

- Nops conectamos con table plus

DB_PASSWORD=MySecr3etPassword@as2
DB_NAME=TesloDB


**  Conectar NEst con postgres

https://docs.nestjs.com/techniques/database

- Instalar config

yarn add @nestjs/config

- INyectarlo en el app.modules

import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [
    ConfigModule.forRoot()
  ],

})
export class AppModule {}


- Instalar Tyoe ORM

yarn add @nestjs/typeorm typeorm

- Agregamos la data necesaria para la conexion a la base de datos en .env

DB_HOST=localhost
DB_PORT = 5432
DB_USERNAME=postgres
DB_PASSWORD=MySecr3etPassword@as2
DB_NAME=TesloDB

- Lo INyectamos en app.mopdule

import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    
    ConfigModule.forRoot(),
    
    TypeOrmModule.forRoot({
      type: 'postgres',
      host: process.env.DB_HOST,
      port: +process.env.DB_PORT,
      database: process.env.DB_NAME,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD,
      autoLoadEntities: true, => Esto carga automaticamente las entidades
      synchronize: true => esto sincroniza automaticamente los cambios, no se recomienda en produccion

    })],
})
export class AppModule {}


- INstalar POstgres

yarn add pg

Bajar y subir el servicio

** Entity¨Product

https://gist.github.com/Klerith/1fb1b9f758bb0c5b2253dfc94f09e1b6

- Crear un recurso llamado productos

nest g res products --no-spec

- en el archivo product.entity.ts agregamos los campos que necesitamos

Los decoradores se importan de typeorm


import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  title: string;
}


- Importamos la entidad en el products module

import { Module } from '@nestjs/common';
import { ProductsService } from './products.service';
import { ProductsController } from './products.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './entities/product.entity';

@Module({
  controllers: [ProductsController],
  providers: [ProductsService],
  imports:[
    TypeOrmModule.forFeature([Product])
  ]
})
export class ProductsModule {}

Al guiardar los cambios observaremos que ya se creo la tabla en la base de datos y algunas
funciones para uuid


** Entidad sin relaciones

- Si agregamos una nueva columna hay que tener en cuenta el tipo de valor de  loa base de datos

Por ejemplo, postgres no tiene number si no , numeric


  @Column('numeric',{
    default: 0
  })
  price: number

 - Podemos agregar mas campos, como array , numerci etc

import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  title: string;

  @Column('numeric', {
    default: 0,
  })
  price: number;

  @Column({
    type: 'text',
    nullable: true,
  })
  description: string;

  @Column('text', {
    unique: true,
  })
  slug: string;

  @Column('int', {
    default: 0,
  })
  stock: number;

  @Column('text', {
    array: true,
  })
  sizes: string[];

  @Column('text')
  gender: string;

  //tags
  //images
}


** Create Producto DTO

- Agregamos el prefijo en el main para que se coloque api

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);


  app.setGlobalPrefix('api')

  await app.listen(3000);
}
bootstrap();



- Crear el DTO

instalar class validator y class transformer

yarn add class-validator class-transformer

Configuramos el pipe en el main

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  app.setGlobalPrefix('api');

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  await app.listen(3000);
}
bootstrap();


- Creamos el DTO para el create con las validaciones

import { IsArray, IsIn, IsInt, IsNumber, IsOptional, 
    IsPositive, IsString, MinLength 
} from 'class-validator';


export class CreateProductDto {

    @IsString()
    @MinLength(1)
    title: string;

    @IsNumber()
    @IsPositive()
    @IsOptional()
    price?: number;

    @IsString()
    @IsOptional()
    description?: string;

    @IsString()
    @IsOptional()
    slug?: string;

    @IsInt()
    @IsPositive()
    @IsOptional()
    stock?: number; 

    // Indicamos que es un arreglo de string
    @IsString({ each: true })
    @IsArray()
    sizes: string[]

    // Que este dentro de estos valores configurados
    @IsIn(['men','women','kid','unisex'])
    gender: string;

    // @IsString({ each: true })
    // @IsArray()
    // @IsOptional()
    // tags: string[];


}


** Insertando con TypeORM

- Corregir el tipo de datos del precio en la entity, a float

import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  title: string;

  @Column('float', {
    default: 0,
  })
  price: number;

  @Column({
    type: 'text',
    nullable: true,
  })
  description: string;

  @Column('text', {
    unique: true,
  })
  slug: string;

  @Column('int', {
    default: 0,
  })
  stock: number;

  @Column('text', {
    array: true,
  })
  sizes: string[];

  @Column('text')
  gender: string;

  //tags
  //images
}

- Inyectamos el patron repositorio de TypeOrm

import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Product } from './entities/product.entity';
import { Repository } from 'typeorm';

@Injectable()
export class ProductsService {

  // Patron repositorio de  type ORm
  constructor(

    // Inyectamos el repositorio que recibe un Product y es de tipo Product
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,


  ){

  }


- Agregamos la funcion que crea el producto

  async create(createProductDto: CreateProductDto) {

    try {

      // Crear instancia del producto 
      const product = this.productRepository.create(createProductDto)
      
      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return product;

      

    } catch (error) {
      console.log(error)
      throw new  InternalServerErrorException('Ayuda!');
    }
    


  }

- Probamos el endpoint de post

{
    "title":"Gabriel´s shirt2",
    "sizes":["SM", "M", "L"],
    "gender":"men",
    "slug": "fernando_shirt"
}


** Manejo de errores

- Instanciamos el logger de common para mostrar los errores

export class ProductsService {
  // instanciamos el Logger de nest common para mostrar los errores
  // Recibe la clase de donde quiero el logger
  private readonly logger = new Logger('ProductsService');

  // Patron repositorio de  type ORm
  constructor(
    // Inyectamos el repositorio que recibe un Product y es de tipo Product
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

- En el catch cambiamos el console log por el logger

  async create(createProductDto: CreateProductDto) {
    try {
      // Crear instancia del producto
      const product = this.productRepository.create(createProductDto);

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return product;
    } catch (error) {
      this.logger.error(error);
      throw new InternalServerErrorException('Ayuda!');
    }
  }

En la consola tendriamos lo siquiente

ERROR [ProductsService] QueryFailedError: duplicate key value violates 
unique constraint "UQ_f7bf944ad9f1034110e8c2133ab"


- Podriamos hacer lo siguiente para ser mas especificico


  async create(createProductDto: CreateProductDto) {
    try {
      // Crear instancia del producto
      const product = this.productRepository.create(createProductDto);

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return product;
    } catch (error) {

      // Especificamos un error
      if(error.code === '23505')
        throw new BadRequestException(error.detail);
      


      //this.logger.error(error);
      throw new InternalServerErrorException('Unexpected error, check server error!');
    }
  }

- Este error lo podemos convertir en un metodo para reutilizarlo

  private handleDbExceptions(error: any) {
    // Especificamos un error
    if (error.code === '23505') throw new BadRequestException(error.detail);

    this.logger.error(error);
    throw new InternalServerErrorException(
      'Unexpected error, check server error!',
    );
  }

- En el metodo de crear invocamos el metodo

 async create(createProductDto: CreateProductDto) {
    try {
      // Crear instancia del producto
      const product = this.productRepository.create(createProductDto);

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return product;
    } catch (error) {
      this.handleDbExceptions(error)
    }
  }

** BeforeInsert y  BeforeUpdate

- Si el campo slug no viene podriamos  validarlo y autocompletarlo asi

     // Validamos si viene el campó slug para autocompletarlo
        if(!createProductDto.slug){
          createProductDto.slug = createProductDto.title
            .toLocaleLowerCase()
            .replaceAll(' ', '_')
            .replaceAll("'", ' ')
        }else{
          createProductDto.slug = createProductDto.slug
          .toLocaleLowerCase()
          .replaceAll(' ', '_')
          .replaceAll("'", ' ')

        }

Tener en cuenta que el replaceAll pueda que no este en la version del EsmatScrpt

por esto, cambiamos la version en el tsconfig

 "target": "ES2022",

Si probamos el insert sin mandar el slug,l veremos que la app lo creara


 - Para mejorar esto, vamos a utilizar con un procedimiento que se ejecute antes de insertarse en la base de datios 
en el DTO

  @BeforeInsert()
  checkSlugInsert(){

        // Validamos si viene el campó slug para autocompletarlo
        if(!this.slug){
          this.slug = this.title
        }  
        
        this.slug = this.slug
          .toLocaleLowerCase()
          .replaceAll(' ', '_')
          .replaceAll("'", ' ')
      

  }


import { BeforeInsert, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  title: string;

  @Column('float', {
    default: 0,
  })
  price: number;

  @Column({
    type: 'text',
    nullable: true,
  })
  description: string;

  @Column('text', {
    unique: true,
  })
  slug: string;

  @Column('int', {
    default: 0,
  })
  stock: number;

  @Column('text', {
    array: true,
  })
  sizes: string[];

  @Column('text')
  gender: string;

  //tags
  //images

  @BeforeInsert()
  checkSlugInsert(){

        // Validamos si viene el campó slug para autocompletarlo
        if(!this.slug){
          this.slug = this.title
        }  
        
        this.slug = this.slug
          .toLocaleLowerCase()
          .replaceAll(' ', '_')
          .replaceAll("'", ' ')
      

  }
}


- Quitamos el codigo que teniamos en el servicio

  async create(createProductDto: CreateProductDto) {
    try {

        // // Validamos si viene el campó slug para autocompletarlo
        // if(!createProductDto.slug){
        //   createProductDto.slug = createProductDto.title
        //     .toLocaleLowerCase()
        //     .replaceAll(' ', '_')
        //     .replaceAll("'", ' ')
        // }else{
        //   createProductDto.slug = createProductDto.slug
        //   .toLocaleLowerCase()
        //   .replaceAll(' ', '_')
        //   .replaceAll("'", ' ')

        // }


      // Crear instancia del producto
      const product = this.productRepository.create(createProductDto);

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return product;
    } catch (error) {
      this.handleDbExceptions(error)
    }
  }


**  Get y Delete

Get, en el servicio 

findAll() {
    return this.productRepository.find({});
  }

para buscar con el id;

En el controlador

 @Get(':id')
  findOne(@Param('id',ParseUUIDPipe) id: string) {
    return this.productsService.findOne(id);
  }


En el servicio


  async findOne(id: string) {

   const product =  await this.productRepository.findOneBy({id}); 
   if(!product)
      throw new NotFoundException(`Product whit id ${id} not found`);
   
    return product;
  }


Para eliminar

Controlador

  @Delete(':id')
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.productsService.remove(id);
  }

Servicio

  async remove(id: string) {

    const product = await this.findOne(id);
    await this.productRepository.remove(product);
  }


** Paginacion

- Crear un modulo llamado common

- Dentro del modulo crear una carpeta llamada dtos

- Dentro de la carpeta Dto creamos el archivo pagination.dto.ts


import { IsOptional, IsPositive } from "class-validator";

export class PaginationDto {

    @IsOptional()
    @IsPositive()
    limit?: number;

    @IsOptional()
    @IsPositive()
    offset?: number;


}

- Agregamos  el Quet parameter al controlador

 @Get()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.productsService.findAll();
  }


- Al probarlo en postman nos dira que el numero debe ser positivo, porque este
viene en string debemos convetirlo


http://localhost:3000/api/products?limit=10


-  para convertirlo lo hacemos en el DTo

import { Type } from "class-transformer";
import { IsOptional, IsPositive, Min } from "class-validator";

export class PaginationDto {

    @IsOptional()
    @IsPositive()
    @Type( () => Number)
    limit?: number;

    @IsOptional()    
    @Min(0)
    @Type( () => Number)
    offset?: number;


}


- Agregamos el parametro para recibir en el servicio con el dto

 async findAll(paginationDto: PaginationDto) {
    return this.productRepository.find({});
  }


- Lo enviamos desde el se controlador

@Get()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.productsService.findAll(paginationDto);
  }

- Destrucutramos el dto y configuramos el limite

  findAll(paginationDto: PaginationDto) {

    const {limit = 10 , offset=0} = paginationDto;

    return this.productRepository.find({
      take: limit,
      skip: offset
    });
  }


**  Buscar por slug y UUID

- Instalar el uuid 

yarn add uuid

yarn add  uuid -D @types/uuid

- importamos el validate de UUID

import { validate as isUUID } from 'uuid';

- Validamos si lo que se recibe en el parametro es un UUID o no

  async findOne(term: string) {

   //const product =  await this.productRepository.findOneBy({id}); 
   
   let product: Product;
 
   if( isUUID(term)){
    product = await this.productRepository.findOneBy({id: term})
   }else{
    product = await this.productRepository.findOneBy({slug: term})
   }

   
   if(!product)
      throw new NotFoundException(`Product whit id ${term} not found`);
   
    return product;
  }


** Query Builder

Nos permitira realizar quey para la consulta
 Lo agregamos para que si no es por el UUID se consulte por el titulo o el slug

 async findOne(term: string) {

   //const product =  await this.productRepository.findOneBy({id}); 
   
   let product: Product;
 
   if( isUUID(term)){
    product = await this.productRepository.findOneBy({id: term})
   }else{
    // product = await this.productRepository.findOneBy({slug: term})

    // Utilizar el Query Builder
    const queryBuilder = this.productRepository.createQueryBuilder();
    product = await queryBuilder
      .where(`UPPER(title) =:title or slug =:slug`, {
        title: term.toLocaleUpperCase(),
        slug: term.toLocaleLowerCase()
      }).getOne();
   }

   
   if(!product)
      throw new NotFoundException(`Product whit id ${term} not found`);
   
    return product;
  }

** Update en Type ORM

- El Controlador


  @Patch(':id')
  update(@Param('id', ParseUUIDPipe) id: string, @Body() updateProductDto: UpdateProductDto) {
    return this.productsService.update(id, updateProductDto);
  }

- El servicio

  async update(id: string, updateProductDto: UpdateProductDto) {
    // Buscamos el objeto por el ID con el preload y hacemos el spread
    // Al objeto encontrado
    const product = await this.productRepository.preload({
      id: id,
      ...updateProductDto,
    });

    if (!product)
      throw new NotFoundException(`Product whit id: ${id} not found`);

    try {
      // Si encuentra el producto lo actualiza
      await this.productRepository.save(product);

      return product;
    } catch (error) {

      this.handleDbExceptions(error);

    }
  }

- Ya pódemos probar el patch en postman

** BeforeUpdate

Se agrega el beforeUpdate en el DTO para que modifique el slug antes de guardar a la base de datos

  @BeforeUpdate()
  checkSlugUpdate() {
    this.slug = this.slug
      .toLocaleLowerCase()
      .replaceAll(' ', '_')
      .replaceAll("'", '');
  }

** Nueva Columna Tags

Agregaremos una nueva columna en el DTO y al guardar se creara automaticamente en la base de datos

import {
  BeforeInsert,
  BeforeUpdate,
  Column,
  Entity,
  PrimaryGeneratedColumn,
} from 'typeorm';

@Entity()
export class Product {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  title: string;

  @Column('float', {
    default: 0,
  })
  price: number;

  @Column({
    type: 'text',
    nullable: true,
  })
  description: string;

  @Column('text', {
    unique: true,
  })
  slug: string;

  @Column('int', {
    default: 0,
  })
  stock: number;

  @Column('text', {
    array: true,
  })
  sizes: string[];

  @Column('text')
  gender: string;

  @Column('text', {
    array: true,
    default: []
  })
  tags: string[];

  //tags
  //images

  @BeforeInsert()
  checkSlugInsert() {
    // Validamos si viene el campó slug para autocompletarlo
    if (!this.slug) {
      this.slug = this.title;
    }

    this.slug = this.slug
      .toLocaleLowerCase()
      .replaceAll(' ', '_')
      .replaceAll("'", '');
  }

  @BeforeUpdate()
  checkSlugUpdate() {
    this.slug = this.slug
      .toLocaleLowerCase()
      .replaceAll(' ', '_')
      .replaceAll("'", '');
  }
}


- Agrego el tags eb ek dto de create para que me deje crearlo

import { IsArray, IsIn, IsInt, IsNumber, IsOptional, 
    IsPositive, IsString, MinLength 
} from 'class-validator';


export class CreateProductDto {

    @IsString()
    @MinLength(1)
    title: string;

    @IsNumber()
    @IsPositive()
    @IsOptional()
    price?: number;

    @IsString()
    @IsOptional()
    description?: string;

    @IsString()
    @IsOptional()
    slug?: string;

    @IsInt()
    @IsPositive()
    @IsOptional()
    stock?: number; 

    // Indicamos que es un arreglo de string
    @IsString({ each: true })
    @IsArray()
    sizes: string[]

    // Que este dentro de estos valores configurados
    @IsIn(['men','women','kid','unisex'])
    gender: string;

    @IsString({ each: true })
    @IsArray()
    @IsOptional()
    tags: string[];


}


** relaciones en TypORM

- Crear una nueva entidad para guardar loas urls de la imagen y relacionarla psteriormente con la tabla de product

product-image.entity.ts
import { Column, Entity, PrimaryGeneratedColumn } from "typeorm";


@Entity()
export class ProductImage{

    @PrimaryGeneratedColumn()
    id: number;

    @Column('text')
    url: string;



}

-  La agregamos en el producto module para que la cree en la base de datos

import { Module } from '@nestjs/common';
import { ProductsService } from './products.service';
import { ProductsController } from './products.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product } from './entities/product.entity';
import { ProductImage } from './entities/product-image.entity';

@Module({
  controllers: [ProductsController],
  providers: [ProductsService],
  imports:[
    TypeOrmModule.forFeature([Product, ProductImage])
  ]
})
export class ProductsModule {}


- Para mejorar la importacion, creamos un archivo index dentro de entities para exportar todas las entidadees

export { ProductImage } from "./product-image.entity";
export { Product } from "./product.entity";



- Cambiamos la importacion en el product module

import { Module } from '@nestjs/common';
import { ProductsService } from './products.service';
import { ProductsController } from './products.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product,ProductImage } from './entities';


@Module({
  controllers: [ProductsController],
  providers: [ProductsService],
  imports:[
    TypeOrmModule.forFeature([Product, ProductImage])
  ]
})
export class ProductsModule {}

** OneToMany -  ManyToOne

- Agregar la relacion de un a muchos en el producto para el campo images, ya que un producto 
podra tener muchas imagenes  - product.entity.ts

 @OneToMany(
      () => ProductImage,
      (productImage) => productImage.product,
      {cascade: true}
  )
  images?: ProductImage[];


- Agregar la relacion de muchos a uno en la entidad de iimagen, por que muchas imagenes pueden tener un productoo


    @ManyToOne(
        () => Product,
        (product) => product.images
    )
    product: Product

** Crear imagenes del producto

- Agregar el campos images en el dto

import { IsArray, IsIn, IsInt, IsNumber, IsOptional, 
    IsPositive, IsString, MinLength 
} from 'class-validator';


export class CreateProductDto {

    @IsString()
    @MinLength(1)
    title: string;

    @IsNumber()
    @IsPositive()
    @IsOptional()
    price?: number;

    @IsString()
    @IsOptional()
    description?: string;

    @IsString()
    @IsOptional()
    slug?: string;

    @IsInt()
    @IsPositive()
    @IsOptional()
    stock?: number; 

    // Indicamos que es un arreglo de string
    @IsString({ each: true })
    @IsArray()
    sizes: string[]

    // Que este dentro de estos valores configurados
    @IsIn(['men','women','kid','unisex'])
    gender: string;

    @IsString({ each: true })
    @IsArray()
    @IsOptional()
    tags: string[];


    @IsString({ each: true })
    @IsArray()
    @IsOptional()
    images?: string[];



}


-  En el servicio de producto inyectaremos otro repositorio para guardar la otra tabla

import {
  BadRequestException,
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { InjectRepository } from '@nestjs/typeorm';

import { Repository } from 'typeorm';
import { PaginationDto } from 'src/common/dtos/pagination.dto';
import { validate as isUUID } from 'uuid';
import { ProductImage, Product } from './entities';

@Injectable()
export class ProductsService {
  // instanciamos el Logger de nest common para mostrar los errores
  // Recibe la clase de donde quiero el logger
  private readonly logger = new Logger('ProductsService');

  // Patron repositorio de  type ORm
  constructor(
    // Inyectamos el repositorio que recibe un Product y es de tipo Product
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,

    @InjectRepository(ProductImage)
    private readonly productImageRepository: Repository<ProductImage>,
  ) {}

  async create(createProductDto: CreateProductDto) {
    try {
      // // Validamos si viene el campó slug para autocompletarlo
      // if(!createProductDto.slug){
      //   createProductDto.slug = createProductDto.title
      //     .toLocaleLowerCase()
      //     .replaceAll(' ', '_')
      //     .replaceAll("'", ' ')
      // }else{
      //   createProductDto.slug = createProductDto.slug
      //   .toLocaleLowerCase()
      //   .replaceAll(' ', '_')
      //   .replaceAll("'", ' ')

      // }

      // Crear instancia del producto

      // Operador rest para almacenar el arreglo de imagenes en un nuava variable
      const { images = [], ...producDetails } = createProductDto;


       /// De esta manera se guardan los dos repository
      const product = this.productRepository.create({
        ...producDetails,
        images: images.map(image =>
          this.productImageRepository.create({ url: image })
        )});

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return {...product, images};
    } catch (error) {
      this.handleDbExceptions(error);
    }
  }

  findAll(paginationDto: PaginationDto) {
    const { limit = 10, offset = 0 } = paginationDto;

    return this.productRepository.find({
      take: limit,
      skip: offset,
    });
  }

  async findOne(term: string) {
    //const product =  await this.productRepository.findOneBy({id});

    let product: Product;

    if (isUUID(term)) {
      product = await this.productRepository.findOneBy({ id: term });
    } else {
      // product = await this.productRepository.findOneBy({slug: term})

      // Utilizar el Query Builder
      const queryBuilder = this.productRepository.createQueryBuilder();
      product = await queryBuilder
        .where(`UPPER(title) =:title or slug =:slug`, {
          title: term.toLocaleUpperCase(),
          slug: term.toLocaleLowerCase(),
        })
        .getOne();
    }

    if (!product)
      throw new NotFoundException(`Product whit id ${term} not found`);

    return product;
  }

  async update(id: string, updateProductDto: UpdateProductDto) {
    // Buscamos el objeto por el ID con el preload y hacemos el spread
    // Al objeto encontrado
    const product = await this.productRepository.preload({
      id: id,
      ...updateProductDto,
      images: [],
    });

    if (!product)
      throw new NotFoundException(`Product whit id: ${id} not found`);

    try {
      // Si encuentra el producto lo actualiza
      await this.productRepository.save(product);

      return product;
    } catch (error) {
      this.handleDbExceptions(error);
    }
  }

  async remove(id: string) {
    const product = await this.findOne(id);
    await this.productRepository.remove(product);
  }

  private handleDbExceptions(error: any) {
    // Especificamos un error
    if (error.code === '23505') throw new BadRequestException(error.detail);

    this.logger.error(error);
    throw new InternalServerErrorException(
      'Unexpected error, check server error!',
    );
  }
}


**  Aplanar las imagenes

- Agregar la relacion al metodo fin all para que traiga los datos relacionades de las dos tablas

 findAll(paginationDto: PaginationDto) {
    const { limit = 10, offset = 0 } = paginationDto;

    return this.productRepository.find({
      take: limit,
      skip: offset,
      relations: {
        images:true
      }
    });
  }

- Modificamos el find all para que devuelva solo las urls de las imagenes y no todo el arreglo

  async findAll(paginationDto: PaginationDto) {
    const { limit = 10, offset = 0 } = paginationDto;

    const products =  await this.productRepository.find({
      take: limit,
      skip: offset,
      relations: {
        images:true
      }
    });

    return products.map( product => ({
      ...product,
      images : product.images.map(img => img.url)
    }))
  }


- Modificar el find one para traer los datos relaciones, con el id y con el slug

  async findOne(term: string) {
    //const product =  await this.productRepository.findOneBy({id});

    let product: Product;

    if (isUUID(term)) {
      // Asi podemos buscar un prodcuto con el idy su relacion
      //product = await this.productRepository.findOne({ where: {id: term}, relations: {images:true} });

      // Pero mejor lo hacemos asi, con egers => https://orkhan.gitbook.io/typeorm/docs/eager-and-lazy-relations
      // Solo se agrega el eger en el product.entity
      product = await this.productRepository.findOneBy({ id: term });
    } else {
      // product = await this.productRepository.findOneBy({slug: term})

      // Utilizar el Query Builder
      // const queryBuilder = this.productRepository.createQueryBuilder();
      // product = await queryBuilder
      //   .where(`UPPER(title) =:title or slug =:slug`, {
      //     title: term.toLocaleUpperCase(),
      //     slug: term.toLocaleLowerCase(),
      //   })
      //   .getOne();

      // para la busca con el slug, utilizaremos el leftjoinAndSelect
      const queryBuilder = this.productRepository.createQueryBuilder('prod');
      product = await queryBuilder
        .where(`UPPER(title) =:title or slug =:slug`, {
          title: term.toLocaleUpperCase(),
          slug: term.toLocaleLowerCase(),
        })
        .leftJoinAndSelect('prod.images', 'prodImages')
        .getOne();
    }

    if (!product)
      throw new NotFoundException(`Product whit id ${term} not found`);

    return product;
  }

- Aplanamos la respuesta de las imagens

Creamos un metodo para devolver el dato aplanado


  async findOnePlain(term: string){

    const {images = [], ...rest} = await this.findOne(term);
     return {
      ...rest,
      images: images.map(image => image.url)
     } 

  }

- Lo cambiamos en el controlador


 @Get(':term')
  findOne(@Param('term') term: string) {
    return this.productsService.findOnePlain(term);
  }













