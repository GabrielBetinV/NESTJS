** Documentacion

https://docs.nestjs.com/techniques/file-upload

 ** Subir archivo al Backend

- Crear un  recurso para subir los archivos

nest g res files --no-spec

- Creamos el endpoint en el servicio de files


- Instalar multer

yarn add -D @types/multer

- Crear el controlador para recibir el archivo con  un interceptor

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UploadedFile,
  UseInterceptors,
} from '@nestjs/common';
import { FilesService } from './files.service';
import { FileInterceptor } from '@nestjs/platform-express';

@Controller('files')
export class FilesController {
  constructor(private readonly filesService: FilesService) {}

  @Post('product')
  @UseInterceptors(FileInterceptor('file')) // Se coloca el nombre de como se recibira el archivo
  uploadProductImage(@UploadedFile() file: Express.Multer.File) {
    return file;
  }
}


** Validar archivos

- Crear una carpeta Helpers dentro de files

- Dentro de la carpeta Helpers crear un archivo 

fileFilter.helper.ts

export const fileFilter = (
  req: Express.Request,
  file: Express.Multer.File,
  callback: Function,
) => {
  console.log({ file });

  callback(null, true);
};


- MAndamos la referencia dentro del controlador

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UploadedFile,
  UseInterceptors,
} from '@nestjs/common';
import { FilesService } from './files.service';
import { FileInterceptor } from '@nestjs/platform-express';
import { fileFilter } from './helpers/fileFilter.helper';

@Controller('files')
export class FilesController {
  constructor(private readonly filesService: FilesService) {}

  @Post('product')
  @UseInterceptors(
    FileInterceptor(
      'file',

      { fileFilter: fileFilter },
    ),
  ) // Se coloca el nombre de como se recibira el archivo
  uploadProductImage(@UploadedFile() file: Express.Multer.File) {
    return {
      fileName: file.originalname,
    };
  }
}


- Creamos la validacion en el Helpers

export const fileFilter = (
  req: Express.Request,
  file: Express.Multer.File,
  callback: Function,
) => {
  
  
  //  console.log({ file });

    if(!file) return callback(new Error('File is empty'), false);

    const fileExptension =  file.mimetype.split('/')[1];
    const validExtensions = ['jpg','jpeg','png','gif'];

    if(validExtensions.includes(fileExptension)) {
        return callback(null, true)
    }


  callback(null, true);
};


- Se agrega la validacion  en el controlador, 

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UploadedFile,
  UseInterceptors,
  BadRequestException,
} from '@nestjs/common';
import { FilesService } from './files.service';
import { FileInterceptor } from '@nestjs/platform-express';
import { fileFilter } from './helpers/fileFilter.helper';

@Controller('files')
export class FilesController {
  constructor(private readonly filesService: FilesService) {}

  @Post('product')
  @UseInterceptors(
    FileInterceptor(
      'file',

      { fileFilter: fileFilter },
    ),
  ) // Se coloca el nombre de como se recibira el archivo
  uploadProductImage(@UploadedFile() file: Express.Multer.File) {
    if (!file) {
      throw new BadRequestException('Make sure that th files is an image');
    }

    return {
      fileName: file.originalname,
    };
  }
}


** Guardar imagen en filesystem

