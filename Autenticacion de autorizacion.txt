** Crear la entidad de usuario


- Crear un nuevo recurso

nest g res auth --no-spec


- Creamos la entidad

import { Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  email: string;

  pasword: string;

  fullName: string;

  isActive: boolean;

  roles: string[];
}

- Importamos la entidad en el modulo para que se cree la tabla

import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { User } from './entities/user.entity';
import { TypeOrmModule } from '@nestjs/typeorm';


@Module({
  controllers: [AuthController],
  providers: [AuthService],
  imports:[
    TypeOrmModule.forFeature([User])
  ],
  exports:[
    TypeOrmModule
  ]
})
export class AuthModule {}


- Terminamos de configurar las demas columnas de la entidad

import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  email: string;

  @Column('text')
  password: string;

  @Column('text')
  fullName: string;

  @Column('bool', {
    default: true,
  })
  isActive: boolean;

  @Column('text', {
    array: true,
    default: ['user'],
  })
  roles: string[];
}



** Crear usuario

- Crear el DTO para el usuario

create-user.dto.ts



Expression regular para la contraseña
https://gist.github.com/Klerith/c77edd9d86174aa68efbfddd21f053a2


import {
  IsEmail,
  IsString,
  Matches,
  MaxLength,
  MinLength,
} from 'class-validator';

export class CreateUserDto {
  @IsString()
  @IsEmail()
  email: string;

  // Agregar expresion regular para la contraseña
  @IsString()
  @MinLength(6)
  @MaxLength(50)
  @Matches(/(?:(?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {
    message:
      'The password must have a Uppercase, lowercase letter and a number',
  })
  password: string;

  @IsString()
  @MinLength(1)
  fullName: string;
}



- Importamos el DTO en el controlador para crear el usuario

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto } from './dto/create-user.dto';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  create(@Body() createAuthDto: CreateUserDto) {
    return this.authService.create(createAuthDto);
  }
}


- Agregamos la funcion en el servicio

import { Injectable } from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';


@Injectable()
export class AuthService {
  create(createAuthDto: CreateUserDto) {
    return 'This action adds a new auth';
  }

 
}


Probar en Insomnia, sin body para identificar que si esta validando el dto y con
body para ver que se ejecuta la funcion

{
	"email":"gbetin@music.com",
	"password": "Abc123",
	"fullName": "Gabriel Betin"
}


- Vamos a crear el usuario desde el servicio y creamos la funcion para el error

import {
  BadRequestException,
  Injectable,
  InternalServerErrorException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { InjectRepository } from '@nestjs/typeorm';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  async create(createAuthDto: CreateUserDto) {
    try {
      const user = this.userRepository.create(createAuthDto);
      await this.userRepository.save(user);
      return user;
    } catch (error) {
      this.handleDBErrors(error);
    }
  }

  private handleDBErrors(error: any) {
    if (error.code === '23505') throw new BadRequestException(error.detail);

    console.log(error);

    throw new InternalServerErrorException('Please check server logs');
  }
}


** Modulos Asyncronos

- Importamos el modulo de JWT de forma asyncrona en el auth module


    // Modulo asyncrono
    JwtModule.registerAsync({
      imports:[],
      inject:[],
      useFactory: () => {
        console.log('JWT_SECRET =>',  process.env.JWT_SECRET)

        return {
          secret: process.env.JWT_SECRET,
          signOptions:{
            expiresIn: '2h'
          }
        }
      }

    })

- De esta manera tambien se puede agregar el modulo, con el configservice

    // Modulo asyncrono agregando el ConfigService para obtener la variable de entorno
    JwtModule.registerAsync({
      imports:[ConfigModule],
      inject:[ConfigService],
      useFactory: (configService: ConfigService) => {
        console.log('JWT_SECRET =>',  configService.get('JWT_SECRET') )

        return {
          secret: configService.get('JWT_SECRET') ,
          signOptions:{
            expiresIn: '2h'
          }
        }
      }

    })

De esta manera ya tenemos la firma que va a tener nuestrosd JWT

** JwtStrategy

https://jwt.io/

- Crear una carpeta llamada strategies dentro de auth

- Crear la interface que va a tener el payload

Crear una carpeta llamda interfaces dentro de auth

crear un archivo llamado jwt-payload.interface.ts



export interface JwtPayload {

    email:string;

    // TODO: añadir todo lo que tengamos

}


- Agregar el configService dentro del auth module

import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { User } from './entities/user.entity';
import { TypeOrmModule } from '@nestjs/typeorm';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { ConfigModule, ConfigService } from '@nestjs/config';


@Module({
  controllers: [AuthController],
  providers: [AuthService],
  imports:[

    ConfigModule,

    TypeOrmModule.forFeature([User]),

    PassportModule.register({ defaultStrategy: 'jwt'}),


    // Modulo asyncrono agregando el ConfigService para obtener la variable de entorno
    JwtModule.registerAsync({
      imports:[ConfigModule],
      inject:[ConfigService],
      useFactory: (configService: ConfigService) => {
        //console.log('JWT_SECRET =>',  configService.get('JWT_SECRET') )

        return {
          secret: configService.get('JWT_SECRET') ,
          signOptions:{
            expiresIn: '2h'
          }
        }
      }

    })

    // Modulo asyncrono
    // JwtModule.registerAsync({
    //   imports:[],
    //   inject:[],
    //   useFactory: () => {
    //     console.log('JWT_SECRET =>',  process.env.JWT_SECRET)

    //     return {
    //       secret: process.env.JWT_SECRET,
    //       signOptions:{
    //         expiresIn: '2h'
    //       }
    //     }
    //   }

    // })

    // JwtModule.register({
    //   secret: process.env.JWT_SECRET,
    //   signOptions: {
    //     expiresIn: '2h'
    //   }

    // })
  ],
  exports:[
    TypeOrmModule
  ]
})
export class AuthModule {}





- Crear un archivo llamada 

jwt-strategy.ts

import { PassportStrategy } from "@nestjs/passport";
import { ExtractJwt, Strategy } from "passport-jwt";
import { User } from "../entities/user.entity";
import { JwtPayload } from "../interfaces/jwt-payload.interface";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { ConfigService } from "@nestjs/config";
import { Injectable, UnauthorizedException } from "@nestjs/common";

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy){

//Inyectamos el patron repositorio de usuario y el configService para obtener variables de entorno
 constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    configService: ConfigService    
 ){
    super({
        secretOrkey: configService.get('JWT_SECRET'),
        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Esta es la autenticacion que escogeremos en postman etc
    })
 }



   // Este metodo nos ayudara a validar si el usuario existe
   async validate(payload: JwtPayload): Promise<User>{

    // Destructuramos el payload
    const {email} = payload; 

    /// Buscamos el usuario por el email
    const user = await this.userRepository.findOneBy({email});


    // Validamos si el usuario existe
    if (!user)
        throw new UnauthorizedException('Token not valid');

    // Validamos si esta activo    
    if (!user.isActive)
        throw new UnauthorizedException('User is inactive, talk with an admin');


    //Retornamos el usuario
    return user;

   }



}

- Inyectamos la estrategia en el auth module

import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { User } from './entities/user.entity';
import { TypeOrmModule } from '@nestjs/typeorm';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { JwtStrategy } from './strategies/jwt-strategy';


@Module({
  controllers: [AuthController],
  providers: [AuthService, JwtStrategy],
  imports:[

    ConfigModule,

    TypeOrmModule.forFeature([User]),

    PassportModule.register({ defaultStrategy: 'jwt'}),


    // Modulo asyncrono agregando el ConfigService para obtener la variable de entorno
    JwtModule.registerAsync({
      imports:[ConfigModule],
      inject:[ConfigService],
      useFactory: (configService: ConfigService) => {
        //console.log('JWT_SECRET =>',  configService.get('JWT_SECRET') )

        return {
          secret: configService.get('JWT_SECRET') ,
          signOptions:{
            expiresIn: '2h'
          }
        }
      }

    })

    // Modulo asyncrono
    // JwtModule.registerAsync({
    //   imports:[],
    //   inject:[],
    //   useFactory: () => {
    //     console.log('JWT_SECRET =>',  process.env.JWT_SECRET)

    //     return {
    //       secret: process.env.JWT_SECRET,
    //       signOptions:{
    //         expiresIn: '2h'
    //       }
    //     }
    //   }

    // })

    // JwtModule.register({
    //   secret: process.env.JWT_SECRET,
    //   signOptions: {
    //     expiresIn: '2h'
    //   }

    // })
  ],
  exports:[
    TypeOrmModule,
    JwtStrategy,
    PassportModule,
    JwtModule
  ]
})
export class AuthModule {}


** Generar un JWT

- Creamos una funcion para obtener el token desde el servicio de autorizacion

  // Funcion para obtener el token
  private getJwtToken(payload: JwtPayload) {
    // Generar el token
    const token = this.jwtService.sign(payload);

    return token;
  }

- Retornamos el token cuando se logeen o se cree un usuario

import {
  BadRequestException,
  Injectable,
  InternalServerErrorException,
  UnauthorizedException,
} from '@nestjs/common';
import { CreateUserDto, LoginUserDto } from './dto/index';
import { Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { InjectRepository } from '@nestjs/typeorm';
import * as bcrypt from 'bcrypt';
import { JwtPayload } from './interfaces/jwt-payload.interface';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    private readonly jwtService: JwtService,
  ) {}

  async create(createAuthDto: CreateUserDto) {
    try {
      /// Destructuramos el objeto para separar  la contraseña
      const { password, ...userData } = createAuthDto;

      // Utilizamos el hasSync
      const user = this.userRepository.create({
        ...userData,
        password: bcrypt.hashSync(password, 10),
      });
      await this.userRepository.save(user);

      // Eliminamos la propiedad de password del objeto para no mostrarla
      delete user.password;

      return {
        ...user,
      token: this.getJwtToken({email: user.email})
    };
    } catch (error) {
      this.handleDBErrors(error);
    }
  }

  async login(loginUserDto: LoginUserDto) {
    //Destrucutrar el objeto que recibimos
    const { password, email } = loginUserDto;

    // Consultar el usuario que encuentre con el email

    // const user = await this.userRepository.findOneBy({ email });

    // otra manera de consultar
    const user = await this.userRepository.findOne({
      where: { email },
      select: { email: true, password: true },
    });

    // Validar el email
    if (!user)
      throw new UnauthorizedException('Credentials are not valid (email)');

    // Validar la contraseña
    if (!bcrypt.compareSync(password, user.password))
      throw new UnauthorizedException('Credentials are not valid (password)');
    // try {

    // } catch (error) {
    //   this.handleDBErrors(error)
    // }

    //Retornar el usuario
    return {
      ...user,
    token: this.getJwtToken({email: user.email})
  };
  }

  // Funcion para obtener el token
  private getJwtToken(payload: JwtPayload) {
    // Generar el token
    const token = this.jwtService.sign(payload);

    return token;
  }

  private handleDBErrors(error: any) {
    if (error.code === '23505') throw new BadRequestException(error.detail);

    console.log(error);

    throw new InternalServerErrorException('Please check server logs');
  }
}


- Podemos probar pegando el token dentro en la oagina y observaremos que
contiene el email del usuario

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImdiZXRpbkBtdXNpY3MuY29tIiwiaWF0IjoxNjkwNDE5OTk0LCJleHAiOjE2OTA0MjcxOTR9.DApRY-NgYCPbgiGv2VdpEzc5y92SGCavr5glMgmmnzI



- Agregamos un BEfore en la entidad para, colocar todos los email en miniscula de la base de datos

import { BeforeInsert, BeforeUpdate, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column('text', {
    unique: true,
  })
  email: string;

  @Column('text',{
    select: false
  })
  password: string;

  @Column('text')
  fullName: string;

  @Column('bool', {
    default: true,
  })
  isActive: boolean;

  @Column('text', {
    array: true,
    default: ['user'],
  })
  roles: string[];


  @BeforeInsert()
  checkFieldsBeforeInsert(){
    this.email = this.email.toLocaleLowerCase().trim();
  }


  @BeforeUpdate()
  checkFieldsBeforeUpdate(){
    this.checkFieldsBeforeInsert();
  }
}


** Private Route  - General

- Crear una ruta Get en el controlador de Auth

  @Get('private')
  testingPrivateRoute(){
    return {
      ok: true,
      message: 'Hola Mundo'
    }
  }

- Agregar un Guards para proteger la ruta

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto ,LoginUserDto} from './dto/index';
import { AuthGuard } from '@nestjs/passport';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  create(@Body() createAuthDto: CreateUserDto) {
    return this.authService.create(createAuthDto);
  }


  @Post('login')
  loginUser(@Body() loginUserDto: LoginUserDto) {
    return this.authService.login(loginUserDto);
  }


  @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(){
    return {
      ok: true,
      message: 'Hola Mundo'
    }
  }

}


Si probamos la ruta me indica que no no estoy autorizado

http://localhost:3000/api/auth/private

-  Si pegamos el token en postman o insomnia ,  nos va a permitr  ver la peticion


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImdiZXRpbkBtdXNpY3MuY29tIiwiaWF0IjoxNjkwNDE5OTk0LCJleHAiOjE2OTA0MjcxOTR9.DApRY-NgYCPbgiGv2VdpEzc5y92SGCavr5glMgmmnzI

** Cambiar email por id

- Cambiar el nombre en la interface



export interface JwtPayload {

    id:string;

    // TODO: añadir todo lo que tengamos

}

- Cambiar el parametro a enviar en el servicio de auth 

  token: this.getJwtToken({id: user.id})

- Cambiarlo en la estrategia

import { PassportStrategy } from "@nestjs/passport";
import { ExtractJwt, Strategy } from "passport-jwt";
import { User } from "../entities/user.entity";
import { JwtPayload } from "../interfaces/jwt-payload.interface";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { ConfigService } from "@nestjs/config";
import { Injectable, UnauthorizedException } from "@nestjs/common";

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy){

//Inyectamos el patron repositorio de usuario y el configService para obtener variables de entorno
 constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    configService: ConfigService    
 ){
    super({
        secretOrKey:  configService.get('JWT_SECRET'),
        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Esta es la autenticacion que escogeremos en postman etc
    })
 }



   // Este metodo nos ayudara a validar si el usuario existe
   async validate(payload: JwtPayload): Promise<User>{

    // Destructuramos el payload
    const {id} = payload; 

    /// Buscamos el usuario por el email
    const user = await this.userRepository.findOneBy({id});


    // Validamos si el usuario existe
    if (!user)
        throw new UnauthorizedException('Token not valid');

    // Validamos si esta activo    
    if (!user.isActive)
        throw new UnauthorizedException('User is inactive, talk with an admin');


    //Retornamos el usuario
    return user;

   }



}

- Agregar en el where el id

  async login(loginUserDto: LoginUserDto) {
    //Destrucutrar el objeto que recibimos
    const { password, email } = loginUserDto;

    // Consultar el usuario que encuentre con el email

    // const user = await this.userRepository.findOneBy({ email });

    // otra manera de consultar
    const user = await this.userRepository.findOne({
      where: { email },
      select: { email: true, password: true, id:true },
    });

    // Validar el email
    if (!user)
      throw new UnauthorizedException('Credentials are not valid (email)');

    // Validar la contraseña
    if (!bcrypt.compareSync(password, user.password))
      throw new UnauthorizedException('Credentials are not valid (password)');
    // try {

    // } catch (error) {
    //   this.handleDBErrors(error)
    // }

    //Retornar el usuario
    return {
      ...user,
      token: this.getJwtToken({id: user.id})
  };
  }

** Custom Property Decorator

- De esta manera podriamos obtener el usuario de la request

 @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(
    @Req() request :Express.Request
  ){

    console.log({user: request.user})
    return {
      ok: true,
      message: 'Hola Mundo'
    }
  }

- Pero mejor lo obtenenemos realizando un decorador personalizado

Creamos una carpeta llamada decorators dentro de auth

Dentro de la carpeta, este archivo => get-user.decorator.ts

import { ExecutionContext, InternalServerErrorException, createParamDecorator } from "@nestjs/common";



export const GetUser = createParamDecorator(
    (data, ctx: ExecutionContext) => {
     
        // Obtenemos la reques desde el contexto
        const req = ctx.switchToHttp().getRequest();
        
        // Almacenamos el usuario enun a variable
        const user = req.user;

        if(!user)
            throw new InternalServerErrorException('User not found (request)');

        return user
    }

);

- Agregamos el decorador en el controlador

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Req,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto ,LoginUserDto} from './dto/index';
import { AuthGuard } from '@nestjs/passport';
import * as request from 'supertest';
import { GetUser } from './decorators/get-user.decorator';
import { User } from './entities/user.entity';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  create(@Body() createAuthDto: CreateUserDto) {
    return this.authService.create(createAuthDto);
  }


  @Post('login')
  loginUser(@Body() loginUserDto: LoginUserDto) {
    return this.authService.login(loginUserDto);
  }


  @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(
    //@Req() request :Express.Request

    // Obtenedremos el usuario
    @GetUser() user: User
    ){

   // console.log({user: request.user})
    return {
      ok: true,
      user
    }
  }

}


** Utilizar de dos maneras el decorador

- Lo agregamos en el controlador

 @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(
    //@Req() request :Express.Request

    // Obtenedremos el usuario
    @GetUser() user: User,
    @GetUser('email') userEmail: string
    ){

   // console.log({user: request.user})
    return {
      ok: true,
      user,

      userEmail
    }
  }

- Regresamos  con un operador ternario el usuario , ya sea con data o sin data

import { ExecutionContext, InternalServerErrorException, createParamDecorator } from "@nestjs/common";



export const GetUser = createParamDecorator(
    (data: string, ctx: ExecutionContext) => {
     
        // Obtenemos la reques desde el contexto
        const req = ctx.switchToHttp().getRequest();
        
        // Almacenamos el usuario enun a variable
        const user = req.user;

        if(!user)
            throw new InternalServerErrorException('User not found (request)');

        // Agregamos un ternario para que si tiene data retorne el arreglo de objetos    
        return (!data)
              ? user
              : user[data]
    }

);


- Crear otro custom decorator que muestre los headers recibido

Crear el archivo raw-headers.decorator.ts

import { ExecutionContext, InternalServerErrorException, createParamDecorator } from "@nestjs/common";



export const RawHeaders = createParamDecorator(
    (data: string, ctx: ExecutionContext) => {
     
        // Obtenemos la reques desde el contexto
        const req = ctx.switchToHttp().getRequest();
        
       
        return req.rawHeaders;
    }

);

- creamos un archivo de barril para exportar los dos decoradores

index.ts

export { GetUser } from "./get-user.decorator";
export { RawHeaders } from "./raw-headers.decorator";


- Cambiamos la importacion en el controlador

import { GetUser,RawHeaders } from './decorators';

- Agregamos el nuevo dcorador en la ruta del controlador


import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Req,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto ,LoginUserDto} from './dto/index';
import { AuthGuard } from '@nestjs/passport';
import * as request from 'supertest';
import { GetUser,RawHeaders } from './decorators';
import { User } from './entities/user.entity';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  create(@Body() createAuthDto: CreateUserDto) {
    return this.authService.create(createAuthDto);
  }


  @Post('login')
  loginUser(@Body() loginUserDto: LoginUserDto) {
    return this.authService.login(loginUserDto);
  }


  @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(
    //@Req() request :Express.Request

    // Obtenedremos el usuario
    @GetUser() user: User,
    @GetUser('email') userEmail: string,
    @RawHeaders() rawHeaders: string[]
    ){

   // console.log({user: request.user})
    return {
      ok: true,
      user,
      userEmail,
      rawHeaders

    }
  }

}


-De todas maneras ya existe un decorador que trae los headers

@Headers


import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Req,
  Headers,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { CreateUserDto ,LoginUserDto} from './dto/index';
import { AuthGuard } from '@nestjs/passport';
import * as request from 'supertest';
import { GetUser,RawHeaders } from './decorators';
import { User } from './entities/user.entity';
import { IncomingHttpHeaders } from 'http';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  create(@Body() createAuthDto: CreateUserDto) {
    return this.authService.create(createAuthDto);
  }


  @Post('login')
  loginUser(@Body() loginUserDto: LoginUserDto) {
    return this.authService.login(loginUserDto);
  }


  @Get('private')
  @UseGuards(AuthGuard())
  testingPrivateRoute(
    //@Req() request :Express.Request

    // Obtenedremos el usuario
    @GetUser() user: User,
    @GetUser('email') userEmail: string,
    @RawHeaders() rawHeaders: string[],
    @Headers() headers: IncomingHttpHeaders
    ){

   // console.log({user: request.user})
    return {
      ok: true,
      user,
      userEmail,
      rawHeaders,
      headers

    }
  }

}



** Custom Guard y Custom Decorator

 - Crear un nuevo end POint para obtener el usuario

  @Get('private2')
  @UseGuards(AuthGuard())
  privateRoute2(
    
    @GetUser() user: User
  ){

    return {
      ok: true,
      user
    }

  }



- Agregamos una metadata


  @Get('private2')
  @SetMetadata('roles', ['admin','super-user','']) // En esta metada tenemos un arreglo de roles
  @UseGuards(AuthGuard())
  privateRoute2(
    
    @GetUser() user: User
  ){

    return {
      ok: true,
      user
    }

  }

- Creamos un guard pra validar los roles

nest g gu auth/guards/userRoles --no-spec

import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class UserRolesGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {


    console.log('UserRoleGuard')

    return true;
  }
}

- probar el guards


  @Get('private2')
  @SetMetadata('roles', ['admin','super-user','']) // En esta metada tenemos un arreglo de roles
  @UseGuards(AuthGuard(), UserRolesGuard)
  privateRoute2(
    
    @GetUser() user: User
  ){

    return {
      ok: true,
      user
    }

  }

}

- Agregamos al guards un reflector para obtener los datos de la metada


import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';

@Injectable()
export class UserRolesGuard implements CanActivate {

  constructor(
    // ME ayuda a aver iformacion de los decoradores y metadada
    private readonly reflector: Reflector
  ){

  }


  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {


    //console.log('UserRoleGuard')


    // Obtenemos el arreglo de roles del metadata
    const validRoles: string[] = this.reflector.get('roles', context.getHandler())

    console.log(validRoles)

    return true;
  }
}

** Verificar el rol del usuario

Agregamos estas validaciones para que elk guards valide 

import {
  BadRequestException,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  Injectable,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';
import { User } from 'src/auth/entities/user.entity';

@Injectable()
export class UserRolesGuard implements CanActivate {
  constructor(
    // ME ayuda a aver iformacion de los decoradores y metadada
    private readonly reflector: Reflector,
  ) {}

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    //console.log('UserRoleGuard')

    // Obtenemos el arreglo de roles del metadata
    const validRoles: string[] = this.reflector.get(
      'roles',
      context.getHandler(),
    );

    // Obtenemos el usuario
    const req = context.switchToHttp().getRequest();
    const user = req.user as User;

    // Validamos si el usuario no exista
    if (!user) throw new BadRequestException('User not found');

    // asi obtenemos el rol del usuario
    console.log({ userRoles: user.roles });

    //console.log(validRoles)

    // Recorremos el arreglo de usuario
    for (const role of user.roles) {
      // Si al menos hay un role dentro del arreglo retornamos true
      if (validRoles.includes(role)) {
        return true;
      }
    }

    // Si no esta en el arreglo retornamos la exception, informando 
    // los tipos de usuarios que debe tener
    throw new ForbiddenException(
      `User ${user.fullName} need a valid role: [${validRoles}]`
    )

    //return true;
  }
}

- Agregamos una validacion para el caso en el que no se ennvie roles en el metada,
se dejhe pasar

  // Si  no hay metadata de arreglos, se retorna true  
    if(!validRoles) return true;
    if(validRoles.length === 0) return true;


** Custom Decorator

- Crear un un decorator llamado  roleProtected

nest g d auth/decorators/roleprotected --no-spec

import { SetMetadata } from '@nestjs/common';

export const Roleprotected = (...args: string[]) => SetMetadata('roleprotected', args);


-   Agregamos una constante que se llame META_ROLES, para almacenar el 
string de la metadata y asi nos facilita cambiar en un solo lado

import { SetMetadata } from '@nestjs/common';

export const META_ROLES = 'roles';


export const Roleprotected = (...args: string[]) => {

return SetMetadata(META_ROLES, args);

};


- Agregamos la metada en el guard de user-roles

import {
  BadRequestException,
  CanActivate,
  ExecutionContext,
  ForbiddenException,
  Injectable,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Observable } from 'rxjs';
import { META_ROLES } from 'src/auth/decorators/roleprotected.decorator';
import { User } from 'src/auth/entities/user.entity';

@Injectable()
export class UserRolesGuard implements CanActivate {
  constructor(
    // ME ayuda a aver iformacion de los decoradores y metadada
    private readonly reflector: Reflector,
  ) {}

  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    //console.log('UserRoleGuard')

    // Obtenemos el arreglo de roles del metadata
    const validRoles: string[] = this.reflector.get(
      META_ROLES,
      context.getHandler(),
    );

    // Si  no hay metadata de arreglos, se retorna true  
    if(!validRoles) return true;
    if(validRoles.length === 0) return true;

    // Obtenemos el usuario
    const req = context.switchToHttp().getRequest();
    const user = req.user as User;

    // Validamos si el usuario no exista
    if (!user) throw new BadRequestException('User not found');

    // asi obtenemos el rol del usuario
    console.log({ userRoles: user.roles });

    //console.log(validRoles)

    // Recorremos el arreglo de usuario
    for (const role of user.roles) {
      // Si al menos hay un role dentro del arreglo retornamos true
      if (validRoles.includes(role)) {
        return true;
      }
    }

    // Si no esta en el arreglo retornamos la exception, informando 
    // los tipos de usuarios que debe tener
    throw new ForbiddenException(
      `User ${user.fullName} need a valid role: [${validRoles}]`
    )

    //return true;
  }
}


- Creamos una interface que tenga un enum con los tipos de roles

export enum ValidRoles {
  admin = 'admin',
  superUser = 'super-user',
  user = 'user',
}


- Creamos el archivo de barril para exportar las interfaces

index.ts

export { JwtPayload } from './jwt-payload.interface';
export { ValidRoles } from "./valid-roles";



- Agregamos el tipo al decorador de role protected

import { SetMetadata } from '@nestjs/common';
import { ValidRoles } from '../interfaces';

export const META_ROLES = 'roles';


export const Roleprotected = (...args: ValidRoles[]) => {

return SetMetadata(META_ROLES, args);

};


- Agregamos el decorador en la ruta 


  @Get('private2')
  //@SetMetadata('roles', ['admin','super-user','']) // En esta metada tenemos un arreglo de roles
  @Roleprotected(ValidRoles.superUser, ValidRoles.admin)
  @UseGuards(AuthGuard(), UserRolesGuard)
  privateRoute2(
    
    @GetUser() user: User
  ){

    return {
      ok: true,
      user
    }

  }

** Composicion de decoradores

https://docs.nestjs.com/custom-decorators#decorator-composition

- Creamosun decorador de acuerdo a la documentacion =>auth.decorator.ts

Es un decorador que va a tener por dentro otros decoradores

- Copiamos el codigo de la documentacion

import { applyDecorators } from '@nestjs/common';

export function Auth(...roles: Role[]) {
  return applyDecorators(
    SetMetadata('roles', roles),
    UseGuards(AuthGuard, RolesGuard),
    ApiBearerAuth(),
    ApiUnauthorizedResponse({ description: 'Unauthorized' }),
  );
}


- Modificamos la funcion 
import { UseGuards, applyDecorators } from '@nestjs/common';
import { ValidRoles } from '../interfaces';
import { Roleprotected } from './roleprotected.decorator';
import { AuthGuard } from '@nestjs/passport';
import { UserRolesGuard } from '../guards/user-roles/user-roles.guard';

export function Auth(...roles: ValidRoles[]) {
  return applyDecorators(
    Roleprotected(...roles),
    UseGuards(AuthGuard(), UserRolesGuard),

  );
}

- Exportamos el decorador en el archivo de barril

export { Auth } from "./auth.decorator";
export { Roleprotected } from "./roleprotected.decorator";

export { GetUser } from "./get-user.decorator";
export { RawHeaders } from "./raw-headers.decorator";


- Agregamos  el decoador en la ruta

  @Get('private3')
  //@SetMetadata('roles', ['admin','super-user','']) // En esta metada tenemos un arreglo de roles
  //@Roleprotected(ValidRoles.superUser, ValidRoles.admin)
  //@UseGuards(AuthGuard(), UserRolesGuard)
  @Auth()
  privateRoute3(
    
    @GetUser() user: User
  ){

    return {
      ok: true,
      user
    }

  }

}


** Decorador Auth en otros modulos

- Agregemos el decorador en el seed controllers

import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';
import { SeedService } from './seed.service';
import { ValidRoles } from 'src/auth/interfaces';
import { Auth } from 'src/auth/decorators';


@Controller('seed')
export class SeedController {
  constructor(private readonly seedService: SeedService) {}

  @Get()
  @Auth(ValidRoles.admin)
  executeSeed() {
    return this.seedService.runSeed();
  }

}


- Notaremos que hay un error

 ERROR [AuthGuard] In order to use "defaultStrategy", please, ensure to import PassportModule in each place where AuthGuard() is being used. Otherwise, passport won't work correctly.


- Importamos el authmodule en el seed module

import { Module } from '@nestjs/common';
import { SeedService } from './seed.service';
import { SeedController } from './seed.controller';
import { ProductsModule } from 'src/products/products.module';
import { AuthModule } from 'src/auth/auth.module';

@Module({
  controllers: [SeedController],
  providers: [SeedService],
  imports:[
    ProductsModule,
    AuthModule
  ]
})
export class SeedModule {}

De esta manera podemos probar la ejecucion del seed con el usuario autenticado

- Importamos el auith module en producto module

import { Module } from '@nestjs/common';
import { ProductsService } from './products.service';
import { ProductsController } from './products.controller';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Product,ProductImage } from './entities';
import { AuthModule } from 'src/auth/auth.module';


@Module({
  controllers: [ProductsController],
  providers: [ProductsService],
  imports:[
    TypeOrmModule.forFeature([Product, ProductImage]),
    AuthModule
  ],
  exports:[
    ProductsService,
    TypeOrmModule,
  
  ]
})
export class ProductsModule {}



- Si agregamos el auth en la clase del controlador de productos, nos va a pedir autorizacion

import { Controller, Get, Post, Body, Patch, Param, Delete, ParseUUIDPipe, Query } from '@nestjs/common';
import { ProductsService } from './products.service';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { PaginationDto } from 'src/common/dtos/pagination.dto';
import { Auth } from 'src/auth/decorators';

@Controller('products')
@Auth()
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  @Post()
  create(@Body() createProductDto: CreateProductDto) {
    return this.productsService.create(createProductDto);
  }

  @Get()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.productsService.findAll(paginationDto);
  }

  @Get(':term')
  findOne(@Param('term') term: string) {
    return this.productsService.findOnePlain(term);
  }

  @Patch(':id')
  update(@Param('id', ParseUUIDPipe) id: string, @Body() updateProductDto: UpdateProductDto) {
    return this.productsService.update(id, updateProductDto);
  }

  @Delete(':id')
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.productsService.remove(id);
  }
}


- Lo mejor es colocar el decorador en la ruta especifica


import { Controller, Get, Post, Body, Patch, Param, Delete, ParseUUIDPipe, Query } from '@nestjs/common';
import { ProductsService } from './products.service';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { PaginationDto } from 'src/common/dtos/pagination.dto';
import { Auth } from 'src/auth/decorators';
import { ValidRoles } from 'src/auth/interfaces';

@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  @Post()
  @Auth(ValidRoles.admin)
  create(@Body() createProductDto: CreateProductDto) {
    return this.productsService.create(createProductDto);
  }

  @Get()
  @Auth()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.productsService.findAll(paginationDto);
  }

  @Get(':term')
  @Auth()
  findOne(@Param('term') term: string) {
    return this.productsService.findOnePlain(term);
  }

  @Patch(':id')
  @Auth(ValidRoles.admin)
  update(@Param('id', ParseUUIDPipe) id: string, @Body() updateProductDto: UpdateProductDto) {
    return this.productsService.update(id, updateProductDto);
  }

  @Delete(':id')
  @Auth(ValidRoles.admin)
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.productsService.remove(id);
  }
}



El guards se puede utilizar  para proteger la ruta y el decorador se puede utilizar
para tener autorizacion sobre el registro, es decir permite hacer el post o no de acuerdo 
al rol


** Usuario que creo el producto

- Agregar el OnetoMany en la entidad de User


 @OneToMany(
    () => Product,
    (product) => product.user
  )
  product: Product;


- Agregar un ManyToOne en la entidad de producto



  @ManyToOne(
    () => User,
    (user) => user.product
  )
  user: User;

Al levantar el proyecto, se creara la columna de UserId en la tabla de productos

- Agregamos el eager para que muestre el campo relacionado

  @ManyToOne(
    () => User,
    (user) => user.product,
    {eager: true}
  )
  user: User;



** Insertar UserID en los productos.

-  Borrar todos los datos de la tabla de producto

- Agregamos el get user en el post y patch del controlador de productos

import { Controller, Get, Post, Body, Patch, Param, Delete, ParseUUIDPipe, Query } from '@nestjs/common';
import { ProductsService } from './products.service';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { PaginationDto } from 'src/common/dtos/pagination.dto';
import { Auth, GetUser } from 'src/auth/decorators';
import { ValidRoles } from 'src/auth/interfaces';
import { User } from 'src/auth/entities/user.entity';

@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  @Post()
  @Auth(ValidRoles.admin)
  create(@Body() createProductDto: CreateProductDto,
  @GetUser() user: User) {
    return this.productsService.create(createProductDto, user);
  }

  @Get()
  @Auth()
  findAll(@Query() paginationDto: PaginationDto) {
    return this.productsService.findAll(paginationDto);
  }

  @Get(':term')
  @Auth()
  findOne(@Param('term') term: string) {
    return this.productsService.findOnePlain(term);
  }

  @Patch(':id')
  @Auth(ValidRoles.admin)
  update(@Param('id', ParseUUIDPipe) id: string, @Body() updateProductDto: UpdateProductDto,@GetUser() user: User
  ) {
    return this.productsService.update(id, updateProductDto, user);
  }

  @Delete(':id')
  @Auth(ValidRoles.admin)
  remove(@Param('id', ParseUUIDPipe) id: string) {
    return this.productsService.remove(id);
  }
}


- Agregamos el usuario en las funciones que crean y actualizan productos
del servicio de productos

import {
  BadRequestException,
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException,
} from '@nestjs/common';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { InjectRepository } from '@nestjs/typeorm';

import { DataSource, Repository } from 'typeorm';
import { PaginationDto } from 'src/common/dtos/pagination.dto';
import { validate as isUUID } from 'uuid';
import { ProductImage, Product } from './entities';
import { Delete, Query } from '@nestjs/common';
import { User } from 'src/auth/entities/user.entity';

@Injectable()
export class ProductsService {
  // instanciamos el Logger de nest common para mostrar los errores
  // Recibe la clase de donde quiero el logger
  private readonly logger = new Logger('ProductsService');

  // Patron repositorio de  type ORm
  constructor(
    // Inyectamos el repositorio que recibe un Product y es de tipo Product
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,

    @InjectRepository(ProductImage)
    private readonly productImageRepository: Repository<ProductImage>,

    // Inyectamos el Datasource, que conoce la cadena de conexion
    private readonly dataSource: DataSource,
  ) {}

  async create(createProductDto: CreateProductDto, user: User) {
    try {
      // // Validamos si viene el campó slug para autocompletarlo
      // if(!createProductDto.slug){
      //   createProductDto.slug = createProductDto.title
      //     .toLocaleLowerCase()
      //     .replaceAll(' ', '_')
      //     .replaceAll("'", ' ')
      // }else{
      //   createProductDto.slug = createProductDto.slug
      //   .toLocaleLowerCase()
      //   .replaceAll(' ', '_')
      //   .replaceAll("'", ' ')

      // }

      // Crear instancia del producto

      // Operador rest para almacenar el arreglo de imagenes en un nuava variable
      const { images = [], ...producDetails } = createProductDto;

      /// De esta manera se guardan los dos repository
      const product = this.productRepository.create({
        ...producDetails,
        user,
        images: images.map((image) =>
          this.productImageRepository.create({ url: image }),
        ),
      });

      // Grabamos el producto en la base de datos
      await this.productRepository.save(product);

      // Retornamos el producto
      return { ...product, images };
    } catch (error) {
      this.handleDbExceptions(error);
    }
  }

  async findAll(paginationDto: PaginationDto) {
    const { limit = 10, offset = 0 } = paginationDto;

    const products = await this.productRepository.find({
      take: limit,
      skip: offset,
      relations: {
        images: true,
      },
    });

    return products.map((product) => ({
      ...product,
      images: product.images.map((img) => img.url),
    }));
  }

  async findOne(term: string) {
    //const product =  await this.productRepository.findOneBy({id});

    let product: Product;

    if (isUUID(term)) {
      // Asi podemos buscar un prodcuto con el idy su relacion
      //product = await this.productRepository.findOne({ where: {id: term}, relations: {images:true} });

      // Pero mejor lo hacemos asi, con egers => https://orkhan.gitbook.io/typeorm/docs/eager-and-lazy-relations
      // Solo se agrega el eger en el product.entity
      product = await this.productRepository.findOneBy({ id: term });
    } else {
      // product = await this.productRepository.findOneBy({slug: term})

      // Utilizar el Query Builder
      // const queryBuilder = this.productRepository.createQueryBuilder();
      // product = await queryBuilder
      //   .where(`UPPER(title) =:title or slug =:slug`, {
      //     title: term.toLocaleUpperCase(),
      //     slug: term.toLocaleLowerCase(),
      //   })
      //   .getOne();

      // para la busca con el slug, utilizaremos el leftjoinAndSelect
      const queryBuilder = this.productRepository.createQueryBuilder('prod');
      product = await queryBuilder
        .where(`UPPER(title) =:title or slug =:slug`, {
          title: term.toLocaleUpperCase(),
          slug: term.toLocaleLowerCase(),
        })
        .leftJoinAndSelect('prod.images', 'prodImages')
        .getOne();
    }

    if (!product)
      throw new NotFoundException(`Product whit id ${term} not found`);

    return product;
  }

  async findOnePlain(term: string) {
    const { images = [], ...rest } = await this.findOne(term);
    return {
      ...rest,
      images: images.map((image) => image.url),
    };
  }

  async update(id: string, updateProductDto: UpdateProductDto, user:User) {
    // Estraer los datos del objeto sin las imagenes, el rest (Que es la data que va a actualizar)
    const { images, ...toUpdate } = updateProductDto;

    // Hacemos el preload del producto
    const product = await this.productRepository.preload({
      id,
      ...toUpdate,
    });

    // Buscamos el objeto por el ID con el preload y hacemos el spread
    // Al objeto encontrado
    // const product = await this.productRepository.preload({
    //   id: id,
    //   ...updateProductDto,
    //   images: [],
    // });

    if (!product)
      throw new NotFoundException(`Product whit id: ${id} not found`);

    // Crear el Query Runner
    const queryRunner = this.dataSource.createQueryRunner();

    // Nos conectamos a la base de datos
    await queryRunner.connect();

    // Iniciamos la transaccion
    await queryRunner.startTransaction();

    try {
      // Eliminamos las imagenes anteriores
      if (images) {
        // Eliminamos con el query runner, indicamos el id para eliminar
        await queryRunner.manager.delete(ProductImage, { product: { id } });

        // Guardar las nuevas imagenes, hasta este momento no se a inpactado la base de datos
        product.images = images.map((image) =>
          this.productImageRepository.create({ url: image }),
        );
      } else {
        //???????? si no se reciben imagenes, buscamos las imagenes
        // Esto se hace mejor utilizando
        product.images = await this.productImageRepository.findBy({product: {id}});
      }

      //  Guardar el producto, pero aun no se ha echo commits
      product.user = user;
      await queryRunner.manager.save(product);

      // Si encuentra el producto lo actualiza
      //await this.productRepository.save(product);

      // Aca realizamos el commit
      await queryRunner.commitTransaction();
      await queryRunner.release();

      return this.findOnePlain(id);
     // return product;
    } catch (error) {

      //Aca realizamos el rollback de la transaccion
      await queryRunner.rollbackTransaction();
      await queryRunner.release();

      this.handleDbExceptions(error);
    }
  }

  async remove(id: string) {
    const product = await this.findOne(id);
    await this.productRepository.remove(product);
  }


async deleteAllProducts(){
  const query = this.productRepository.createQueryBuilder('product');

  try {
    
    return await query
    .delete()
    .where({})
    .execute()

  } catch (error) {
    this.handleDbExceptions(error);
    
  }


}


  private handleDbExceptions(error: any) {
    // Especificamos un error
    if (error.code === '23505') throw new BadRequestException(error.detail);

    this.logger.error(error);
    throw new InternalServerErrorException(
      'Unexpected error, check server error!',
    );
  }
}


- Comentamos esta linea en el seed service para poder grabar un producto

     //insertPromise.push(this.productsService.create(product));



** SEED  de usuarios, productos e imagenes



- Creamos una funcion para eliminar las tablas de usuario y productos

 // Creamos una funcion para borrar las tablas
  private async deleteTables(){
    
    await this.productsService.deleteAllProducts();

    // Borramos la tabla de los usuarios
    const queryBuilder = this.userRepository.createQueryBuilder();
    await queryBuilder
    .delete()
    .where({})
    .execute()   

  }


 -- Creamos una interface de uuariops en el sedd Data

interface SeedUser {
    email: string;
    fullName: string;
    password: string;
    roles: string[];
}

- Declaramos el arreglo en la interface de SeedDAta

interface SeedData {
    users: SeedUser[];
    products: SeedProduct[];
}


- Lo agregamos en el initialData de seed-data

export const initialData: SeedData = {
  users: [
    {
      email: 'gbetin@litoplas.com',
      fullName: 'Gabriel Betin',
      password: 'Abc123',
      roles: ['admin'],
    },
    {
        email: 'abetin@litoplas.com',
        fullName: 'Angel Betin',
        password: 'Abc123',
        roles: ['user','super'],
      },
  ],

  products: [
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Crew Neck Sweatshirt has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The sweatshirt features a subtle thermoplastic polyurethane T logo on the chest and a Tesla wordmark below the back collar. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740176-00-A_0_2000.jpg', '1740176-00-A_1.jpg'],
      stock: 7,
      price: 75,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'mens_chill_crew_neck_sweatshirt',
      type: 'shirts',
      tags: ['sweatshirt'],
      title: 'Men’s Chill Crew Neck Sweatshirt',
      gender: 'men',
    },
    {
      description:
        "The Men's Quilted Shirt Jacket features a uniquely fit, quilted design for warmth and mobility in cold weather seasons. With an overall street-smart aesthetic, the jacket features subtle silicone injected Tesla logos below the back collar and on the right sleeve, as well as custom matte metal zipper pulls. Made from 87% nylon and 13% polyurethane.",
      images: ['1740507-00-A_0_2000.jpg', '1740507-00-A_1.jpg'],
      stock: 5,
      price: 200,
      sizes: ['XS', 'S', 'M', 'XL', 'XXL'],
      slug: 'men_quilted_shirt_jacket',
      type: 'shirts',
      tags: ['jacket'],
      title: "Men's Quilted Shirt Jacket",
      gender: 'men',
    },

    {
      description:
        "Introducing the Tesla Raven Collection. The Men's Raven Lightweight Zip Up Bomber has a premium, modern silhouette made from a sustainable bamboo cotton blend for versatility in any season. The hoodie features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, a concealed chest pocket with custom matte zipper pulls and a french terry interior. Made from 70% bamboo and 30% cotton.",
      images: ['1740250-00-A_0_2000.jpg', '1740250-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_raven_lightweight_zip_up_bomber_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Raven Lightweight Zip Up Bomber Jacket",
      gender: 'men',
    },

    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Men's Turbine Long Sleeve Tee features a subtle, water-based T logo on the left chest and our Tesla wordmark below the back collar. The lightweight material is double-dyed, creating a soft, casual style for ideal wear in any season. Made from 50% cotton and 50% polyester.",
      images: ['1740280-00-A_0_2000.jpg', '1740280-00-A_1.jpg'],
      stock: 50,
      price: 45,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_turbine_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Turbine Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Men's Turbine Short Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style for ideal wear in any season. Made from 50% cotton and 50% polyester.",
      images: ['1741416-00-A_0_2000.jpg', '1741416-00-A_1.jpg'],
      stock: 50,
      price: 40,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'men_turbine_short_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Turbine Short Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for comfort, the Cybertruck Owl Tee is made from 100% cotton and features our signature Cybertruck icon on the back.',
      images: ['7654393-00-A_2_2000.jpg', '7654393-00-A_3.jpg'],
      stock: 0,
      price: 35,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'men_cybertruck_owl_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Cybertruck Owl Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by our fully integrated home solar and storage system, the Tesla Solar Roof Tee advocates for clean, sustainable energy wherever you go. Designed for fit, comfort and style, the tee features an aerial view of our seamless Solar Roof design on the front with our signature T logo above 'Solar Roof' on the back. Made from 100% Peruvian cotton.",
      images: ['1703767-00-A_0_2000.jpg', '1703767-00-A_1.jpg'],
      stock: 15,
      price: 35,
      sizes: ['S', 'M', 'L', 'XL'],
      slug: 'men_solar_roof_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Solar Roof Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by the world’s most unlimited resource, the Let the Sun Shine Tee highlights our fully integrated home solar and storage system. Designed for fit, comfort and style, the tee features a sunset graphic along with our Tesla wordmark on the front and our signature T logo printed above 'Solar Roof' on the back. Made from 100% Peruvian cotton.",
      images: ['1700280-00-A_0_2000.jpg', '1700280-00-A_1.jpg'],
      stock: 17,
      price: 35,
      sizes: ['XS', 'S', 'XL', 'XXL'],
      slug: 'men_let_the_sun_shine_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Let the Sun Shine Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D Large Wordmark Tee is made from 100% Peruvian cotton with a 3D silicone-printed Tesla wordmark printed across the chest.",
      images: ['8764734-00-A_0_2000.jpg', '8764734-00-A_1.jpg'],
      stock: 12,
      price: 35,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_3d_large_wordmark_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D Large Wordmark Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for fit, comfort and style, the Tesla T Logo Tee is made from 100% Peruvian cotton and features a silicone-printed T Logo on the left chest.',
      images: ['7652426-00-A_0_2000.jpg', '7652426-00-A_1.jpg'],
      stock: 5,
      price: 35,
      sizes: ['XS', 'S'],
      slug: 'men_3d_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D T Logo Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for comfort and style in any size, the Tesla Small Wordmark Tee is made from 100% Peruvian cotton and features a 3D silicone-printed wordmark on the left chest.',
      images: ['8528839-00-A_0_2000.jpg', '8528839-00-A_2.jpg'],
      stock: 2,
      price: 35,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_3d_small_wordmark_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Men’s 3D Small Wordmark Tee',
      gender: 'men',
    },
    {
      description:
        "Designed to celebrate Tesla's incredible performance mode, the Plaid Mode Tee features great fit, comfort and style. Made from 100% cotton, it's the next best thing to riding shotgun at the Nürburgring.",
      images: ['1549268-00-A_0_2000.jpg', '1549268-00-A_2.jpg'],
      stock: 82,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_plaid_mode_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Plaid Mode Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by our popular home battery, the Tesla Powerwall Tee is made from 100% cotton and features the phrase 'Pure Energy' under our signature logo in the back. Designed for fit, comfort and style, the exclusive tee promotes sustainable energy in any environment.",
      images: ['9877034-00-A_0_2000.jpg', '9877034-00-A_2.jpg'],
      stock: 24,
      price: 35,
      sizes: ['XL', 'XXL'],
      slug: 'men_powerwall_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Powerwall Tee",
      gender: 'men',
    },
    {
      description:
        'Inspired by Tesla Battery Day and featuring the unveiled tabless battery cell, Battery Day Tee celebrates the future of energy storage and cell manufacturing. Designed for fit, comfort and style, Battery Day Tee is made from 100% cotton with a stylized cell printed across the chest. Made in Peru.',
      images: ['1633802-00-A_0_2000.jpg', '1633802-00-A_2.jpg'],
      stock: 5,
      price: 30,
      sizes: ['XS', 'S', 'XXL'],
      slug: 'men_battery_day_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Battery Day Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for exceptional comfort and inspired by the Cybertruck unveil event, the Cybertruck Bulletproof Tee is made from 100% cotton and features our signature Cybertruck icon on the back.',
      images: ['7654399-00-A_0_2000.jpg', '7654399-00-A_1.jpg'],
      stock: 150,
      price: 30,
      sizes: ['M', 'L'],
      slug: 'men_cybertruck_bulletproof_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Men’s Cybertruck Bulletproof Tee',
      gender: 'men',
    },
    {
      description:
        'Inspired by the Model Y order confirmation graphic, the limited edition Haha Yes Tee is designed for comfort and style. Made from 100% Peruvian cotton and featuring the Tesla wordmark across the chest, the exclusive tee will commemorate your order for years to come.',
      images: ['7652410-00-A_0.jpg', '7652410-00-A_1_2000.jpg'],
      stock: 10,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_haha_yes_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Haha Yes Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for fit, comfort and style, the limited edition S3XY Tee is made from 100% cotton with a 3D silicone-printed “S3XY” logo across the chest. Made in Peru. Available in black.',
      images: ['8764600-00-A_0_2000.jpg', '8764600-00-A_2.jpg'],
      stock: 34,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_s3xy_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's S3XY Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D Wordmark Long Sleeve Tee is made from 100% cotton and features an understated wordmark logo on the left chest.",
      images: ['8764813-00-A_0_2000.jpg', '8764813-00-A_1.jpg'],
      stock: 15,
      price: 40,
      sizes: ['XL', 'XXL'],
      slug: 'men_3d_wordmark_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D Wordmark Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D T Logo Long Sleeve Tee is made from 100% cotton and features an understated T logo on the left chest.",
      images: ['8529198-00-A_0_2000.jpg', '8529198-00-A_1.jpg'],
      stock: 12,
      price: 40,
      sizes: ['XS', 'XXL'],
      slug: 'men_3d_t_logo_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D T Logo Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Men's Raven Lightweight Hoodie has a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The hoodie features subtle thermoplastic polyurethane Tesla logos across the chest and on the sleeve with a french terry interior for versatility in any season. Made from 70% bamboo and 30% cotton.",
      images: ['1740245-00-A_0_2000.jpg', '1740245-00-A_1.jpg'],
      stock: 10,
      price: 115,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_raven_lightweight_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Men's Raven Lightweight Hoodie",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Chill Pullover Hoodie has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The unisex hoodie features subtle thermoplastic polyurethane Tesla logos across the chest and on the sleeve, a double layer single seam hood and pockets with custom matte zipper pulls. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740051-00-A_0_2000.jpg', '1740051-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'chill_pullover_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: 'Chill Pullover Hoodie',
      gender: 'unisex',
    },
    {
      description:
        "Introducing the Tesla Chill Collection. The Men's Chill Full Zip Hoodie has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The hoodie features subtle thermoplastic polyurethane Tesla logos on the left chest and sleeve, a double layer single seam hood and pockets with custom matte zipper pulls. Made from 60% cotton and 40% recycled polyester.",
      images: ['1741111-00-A_0_2000.jpg', '1741111-00-A_1.jpg'],
      stock: 100,
      price: 85,
      sizes: ['XS', 'L', 'XL', 'XXL'],
      slug: 'men_chill_full_zip_hoodie',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Full Zip Hoodie",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Quarter Zip Pullover has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The pullover features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, as well as a custom matte zipper pull. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740140-00-A_0_2000.jpg', '1740140-00-A_1.jpg'],
      stock: 7,
      price: 85,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_chill_quarter_zip_pullover_-_gray',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Quarter Zip Pullover - Gray",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Quarter Zip Pullover has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The pullover features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, as well as a custom matte zipper pull. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740145-00-A_2_2000.jpg', '1740145-00-A_1.jpg'],
      stock: 15,
      price: 85,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_chill_quarter_zip_pullover_-_white',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Quarter Zip Pullover - White",
      gender: 'men',
    },
    {
      description:
        'The Unisex 3D Large Wordmark Pullover Hoodie features soft fleece and an adjustable, jersey-lined hood for comfort and coverage. Designed in a unisex style, the pullover hoodie includes a tone-on-tone 3D silicone-printed wordmark across the chest.',
      images: ['8529107-00-A_0_2000.jpg', '8529107-00-A_1.jpg'],
      stock: 15,
      price: 70,
      sizes: ['XS', 'S', 'XL', 'XXL'],
      slug: '3d_large_wordmark_pullover_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: '3D Large Wordmark Pullover Hoodie',
      gender: 'unisex',
    },
    {
      description:
        'As with the iconic Tesla logo, the Cybertruck Graffiti Hoodie is a classic in the making. Unisex style featuring soft fleece and an adjustable, jersey-lined hood for comfortable coverage.',
      images: ['7654420-00-A_0_2000.jpg', '7654420-00-A_1_2000.jpg'],
      stock: 13,
      price: 60,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'cybertruck_graffiti_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: 'Cybertruck Graffiti Hoodie',
      gender: 'unisex',
    },
    {
      description:
        'The Relaxed T Logo Hat is a classic silhouette combined with modern details, featuring a 3D T logo and a custom metal buckle closure. The ultrasoft design is flexible and abrasion resistant, while the inner sweatband includes quilted padding for extra comfort and moisture wicking. The visor is fully made from recycled plastic bottles. 100% Cotton.',
      images: ['1657932-00-A_0_2000.jpg', '1657932-00-A_1.jpg'],
      stock: 11,
      price: 30,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'relaxed_t_logo_hat',
      type: 'hats',
      tags: ['hats'],
      title: 'Relaxed T Logo Hat',
      gender: 'unisex',
    },
    {
      description:
        'The Relaxed T Logo Hat is a classic silhouette combined with modern details, featuring a 3D T logo and a custom metal buckle closure. The ultrasoft design is flexible and abrasion resistant, while the inner sweatband includes quilted padding for extra comfort and moisture wicking. The visor is fully made from recycled plastic bottles. 100% Cotton.',
      images: ['1740417-00-A_0_2000.jpg', '1740417-00-A_1.jpg'],
      stock: 13,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'thermal_cuffed_beanie',
      type: 'hats',
      tags: ['hats'],
      title: 'Thermal Cuffed Beanie',
      gender: 'unisex',
    },
    {
      description:
        "The Women's Cropped Puffer Jacket features a uniquely cropped silhouette for the perfect, modern style while on the go during the cozy season ahead. The puffer features subtle silicone injected Tesla logos below the back collar and on the right sleeve, custom matte metal zipper pulls and a soft, fleece lined collar. Made from 87% nylon and 13% polyurethane.",
      images: ['1740535-00-A_0_2000.jpg', '1740535-00-A_1.jpg'],
      stock: 85,
      price: 225,
      sizes: ['XS', 'S', 'M'],
      slug: 'women_cropped_puffer_jacket',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Cropped Puffer Jacket",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Chill Collection. The Women's Chill Half Zip Cropped Hoodie has a premium, soft fleece exterior and cropped silhouette for comfort in everyday lifestyle. The hoodie features an elastic hem that gathers at the waist, subtle thermoplastic polyurethane Tesla logos along the hood and on the sleeve, a double layer single seam hood and a custom ring zipper pull. Made from 60% cotton and 40% recycled polyester.",
      images: ['1740226-00-A_0_2000.jpg', '1740226-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'XXL'],
      slug: 'women_chill_half_zip_cropped_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Chill Half Zip Cropped Hoodie",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Women's Raven Slouchy Crew Sweatshirt has a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The slouchy crew features a subtle thermoplastic polyurethane Tesla wordmark on the left sleeve and a french terry interior for a cozy look and feel in every season. Pair it with your Raven Joggers or favorite on the go fit. Made from 70% bamboo and 30% cotton.",
      images: ['1740260-00-A_0_2000.jpg', '1740260-00-A_1.jpg'],
      stock: 9,
      price: 110,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_raven_slouchy_crew_sweatshirt',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Raven Slouchy Crew Sweatshirt",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Women's Turbine Cropped Long Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style with a cropped silhouette. Made from 50% cotton and 50%",
      images: ['1740290-00-A_0_2000.jpg', '1740290-00-A_1.jpg'],
      stock: 10,
      price: 45,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_turbine_cropped_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Turbine Cropped Long Sleeve Tee",
      gender: 'women',
    },
    {
      description:
        "ntroducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Women's Turbine Cropped Short Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style with a cropped silhouette. Made from 50% cotton and 50% polyester.",
      images: ['1741441-00-A_0_2000.jpg', '1741441-00-A_1.jpg'],
      stock: 0,
      price: 40,
      sizes: ['XS', 'S'],
      slug: 'women_turbine_cropped_short_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Turbine Cropped Short Sleeve Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the ultrasoft Women's T Logo Short Sleeve Scoop Neck Tee features a tonal 3D silicone-printed T logo on the left chest. Made of 50% Peruvian cotton and 50% Peruvian viscose.",
      images: ['8765090-00-A_0_2000.jpg', '8765090-00-A_1.jpg'],
      stock: 30,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_t_logo_short_sleeve_scoop_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's T Logo Short Sleeve Scoop Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the ultrasoft Women's T Logo Long Sleeve Scoop Neck Tee features a tonal 3D silicone-printed T logo on the left chest. Made of 50% Peruvian cotton and 50% Peruvian viscose.",
      images: ['8765100-00-A_0_2000.jpg', '8765100-00-A_1.jpg'],
      stock: 16,
      price: 40,
      sizes: ['XS', 'S', 'L', 'XL', 'XXL'],
      slug: 'women_t_logo_long_sleeve_scoop_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's T Logo Long Sleeve Scoop Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the Women's Small Wordmark Short Sleeve V-Neck Tee features a tonal 3D silicone-printed wordmark on the left chest. Made of 100% Peruvian cotton.",
      images: ['8765120-00-A_0_2000.jpg', '8765120-00-A_1.jpg'],
      stock: 18,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_small_wordmark_short_sleeve_v-neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Small Wordmark Short Sleeve V-Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the Women's Large Wordmark Short Sleeve Crew Neck Tee features a tonal 3D silicone-printed wordmark across the chest. Made of 100% Peruvian pima cotton.",
      images: ['8765115-00-A_0_2000.jpg', '8765115-00-A_1.jpg'],
      stock: 5,
      price: 35,
      sizes: ['XL', 'XXL'],
      slug: 'women_large_wordmark_short_sleeve_crew_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Large Wordmark Short Sleeve Crew Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed to celebrate Tesla's incredible performance mode, the Plaid Mode Tee features great fit, comfort and style. Made from 100% cotton, it's the next best thing to riding shotgun at the Nürburgring.",
      images: ['1549275-00-A_0_2000.jpg', '1549275-00-A_1.jpg'],
      stock: 16,
      price: 35,
      sizes: ['S', 'M'],
      slug: 'women_plaid_mode_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Plaid Mode Tee",
      gender: 'women',
    },
    {
      description:
        "Inspired by our popular home battery, the Tesla Powerwall Tee is made from 100% cotton and features the phrase 'Pure Energy' under our signature logo in the back. Designed for fit, comfort and style, the exclusive tee promotes sustainable energy in any",
      images: ['9877040-00-A_0_2000.jpg', '9877040-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_powerwall_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Women’s Powerwall Tee',
      gender: 'women',
    },
    {
      description:
        "Fully customized and uniquely styled, the Women's Corp Jacket features a silicone-printed 'T' logo on the left chest and prominent Tesla wordmark across the back.",
      images: ['5645680-00-A_0_2000.jpg', '5645680-00-A_3.jpg'],
      stock: 3,
      price: 90,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'women_corp_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Corp Jacket",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Women's Raven Joggers have a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The joggers feature a subtle thermoplastic polyurethane Tesla wordmark and T logo and a french terry interior for a cozy look and feel in every season. Pair them with your Raven Slouchy Crew Sweatshirt, Raven Lightweight Zip Up Jacket or other favorite on the go fit. Made from 70% bamboo and 30% cotton.",
      images: ['1740270-00-A_0_2000.jpg', '1740270-00-A_1.jpg'],
      stock: 162,
      price: 100,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_raven_joggers',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Raven Joggers",
      gender: 'women',
    },
    {
      description:
        'Designed for fit, comfort and style, the Kids Cybertruck Graffiti Long Sleeve Tee features a water-based Cybertruck graffiti wordmark across the chest, a Tesla wordmark down the left arm and our signature T logo on the back collar. Made from 50% cotton and 50% polyester.',
      images: ['1742694-00-A_1_2000.jpg', '1742694-00-A_3.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cybertruck_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cybertruck Long Sleeve Tee',
      gender: 'kid',
    },
    {
      description:
        'The Kids Scribble T Logo Tee is made from 100% Peruvian cotton and features a Tesla T sketched logo for every young artist to wear.',
      images: ['8529312-00-A_0_2000.jpg', '8529312-00-A_1.jpg'],
      stock: 0,
      price: 25,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_scribble_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Scribble T Logo Tee',
      gender: 'kid',
    },
    {
      description:
        'The Kids Cybertruck Tee features the iconic Cybertruck graffiti wordmark and is made from 100% Peruvian cotton for maximum comfort.',
      images: ['8529342-00-A_0_2000.jpg', '8529342-00-A_1.jpg'],
      stock: 10,
      price: 25,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cybertruck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cybertruck Tee',
      gender: 'kid',
    },
    {
      description:
        "The refreshed Kids Racing Stripe Tee is made from 100% Peruvian cotton, featuring a newly enhanced racing stripe with a brushed Tesla wordmark that's perfect for any speed racer.",
      images: ['8529354-00-A_0_2000.jpg', '8529354-00-A_1.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_racing_stripe_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Racing Stripe Tee',
      gender: 'kid',
    },
    {
      description:
        'Designed for fit, comfort and style, the Tesla T Logo Tee is made from 100% Peruvian cotton and features a silicone-printed T Logo on the left chest.',
      images: ['7652465-00-A_0_2000.jpg', '7652465-00-A_1.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_3d_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids 3D T Logo Tee',
      gender: 'kid',
    },
    {
      description:
        'The checkered tee is made from long grain, GMO free Peruvian cotton. Peru is the only country in the world where cotton is picked by hand on a large scale. The 4,500-year-old tradition prevents damage to the fiber during the picking process and removes the need to use chemicals to open the cotton plants before harvest. This environmentally friendly process results in cotton that is soft, strong, and lustrous – and the tee will get even softer with every wash.',
      images: ['100042307_0_2000.jpg', '100042307_alt_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_checkered_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Checkered Tee',
      gender: 'kid',
    },
    {
      description:
        'For the future space traveler with discerning taste, a soft, cotton onesie with snap closure bottom. Clear labeling provided in case of contact with a new spacefaring civilization. 100% Cotton. Made in Peru',
      images: ['1473809-00-A_1_2000.jpg', '1473809-00-A_alt.jpg'],
      stock: 16,
      price: 25,
      sizes: ['XS', 'S'],
      slug: 'made_on_earth_by_humans_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Made on Earth by Humans Onesie',
      gender: 'kid',
    },
    {
      description:
        'The Kids Scribble T Logo Onesie is made from 100% Peruvian cotton and features a Tesla T sketched logo for every little artist to wear.',
      images: ['8529387-00-A_0_2000.jpg', '8529387-00-A_1.jpg'],
      stock: 0,
      price: 30,
      sizes: ['XS', 'S'],
      slug: 'scribble_t_logo_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Scribble T Logo Onesie',
      gender: 'kid',
    },
    {
      description:
        'Show your commitment to sustainable energy with this cheeky onesie for your young one. Note: Does not prevent emissions. 100% Cotton. Made in Peru.',
      images: ['1473834-00-A_2_2000.jpg', '1473829-00-A_2_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S'],
      slug: 'zero_emissions_(almost)_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Zero Emissions (Almost) Onesie',
      gender: 'kid',
    },
    {
      description:
        'Wear your Kids Cyberquad Bomber Jacket during your adventures on Cyberquad for Kids. The bomber jacket features a graffiti-style illustration of our Cyberquad silhouette and wordmark. With three zippered pockets and our signature T logo and Tesla wordmark printed along the sleeves, Kids Cyberquad Bomber Jacket is perfect for wherever the trail takes you. Made from 60% cotton and 40% polyester.',
      images: ['1742702-00-A_0_2000.jpg', '1742702-00-A_1.jpg'],
      stock: 10,
      price: 65,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cyberquad_bomber_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cyberquad Bomber Jacket',
      gender: 'kid',
    },
    {
      description:
        'Cruise the playground in style with the Kids Corp Jacket. Modeled after the original Tesla Corp Jacket, the Kids Corp Jacket features the same understated style and high-quality materials but at a pint-sized scale.',
      images: ['1506211-00-A_0_2000.jpg', '1506211-00-A_1_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_corp_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Corp Jacket',
      gender: 'kid',
    },
  ],
};



- Cremos una funcio0n para insertar los usuarios por default

  // Funcion para insertar usuarios
  private async insertUsers() {
    const seedUsers = initialData.users;

    const users: User[] = [];

    seedUsers.forEach((user) => {
      users.push(this.userRepository.create(user));
    });

    const dbUsers = await this.userRepository.save(seedUsers);

    return dbUsers[0];
  }


- Creamosla funcion para insertar los productos


  private async insertNewProducts(user:User) {
    // Obtengo los datos
    const products = initialData.products;

    // Tendremos un arreglo de promesas
    const insertPromise = [];

    // Recorremos los productos y lo insertamos
    products.forEach((product) => {
      insertPromise.push(this.productsService.create(product, user));
    });

    // Obtenemos  el arreglo, despues que termine de ejecutarse la promesa
    await Promise.all(insertPromise);
  }


- Invocamos la funcion den el runSeed


  async runSeed() {
    // Limpiamos las tablas
    await this.deleteTables();

    // Eliminar todos los datos
    await this.productsService.deleteAllProducts();

    // Insertar los nuevos datos


    // Insert de los usuarios
    const adminUser = await this.insertUsers();

    // Insert de los productos
    await this.insertNewProducts(adminUser);

    return true;
  }


Probar el seed en insomnia

http://localhost:3000/api/seed

** Encriptar contraseña de los usuarios en el SEED

Agregar el bcrypt  para la contraseña en cada usuario del arreglo en seed-data

import * as bcrypt from 'bcrypt';

interface SeedProduct {
  description: string;
  images: string[];
  stock: number;
  price: number;
  sizes: ValidSizes[];
  slug: string;
  tags: string[];
  title: string;
  type: ValidTypes;
  gender: 'men' | 'women' | 'kid' | 'unisex';
}

type ValidSizes = 'XS' | 'S' | 'M' | 'L' | 'XL' | 'XXL' | 'XXXL';
type ValidTypes = 'shirts' | 'pants' | 'hoodies' | 'hats';

interface SeedUser {
  email: string;
  fullName: string;
  password: string;
  roles: string[];
}

interface SeedData {
  users: SeedUser[];
  products: SeedProduct[];
}

export const initialData: SeedData = {
  users: [
    {
      email: 'gbetin@litoplas.com',
      fullName: 'Gabriel Betin',
      password: bcrypt.hashSync('Abc123', 10),
      roles: ['admin'],
    },
    {
        email: 'abetin@litoplas.com',
        fullName: 'Angel Betin',
        password: bcrypt.hashSync('Abc123', 10),
        roles: ['user','super'],
      },
  ],

  products: [
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Crew Neck Sweatshirt has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The sweatshirt features a subtle thermoplastic polyurethane T logo on the chest and a Tesla wordmark below the back collar. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740176-00-A_0_2000.jpg', '1740176-00-A_1.jpg'],
      stock: 7,
      price: 75,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'mens_chill_crew_neck_sweatshirt',
      type: 'shirts',
      tags: ['sweatshirt'],
      title: 'Men’s Chill Crew Neck Sweatshirt',
      gender: 'men',
    },
    {
      description:
        "The Men's Quilted Shirt Jacket features a uniquely fit, quilted design for warmth and mobility in cold weather seasons. With an overall street-smart aesthetic, the jacket features subtle silicone injected Tesla logos below the back collar and on the right sleeve, as well as custom matte metal zipper pulls. Made from 87% nylon and 13% polyurethane.",
      images: ['1740507-00-A_0_2000.jpg', '1740507-00-A_1.jpg'],
      stock: 5,
      price: 200,
      sizes: ['XS', 'S', 'M', 'XL', 'XXL'],
      slug: 'men_quilted_shirt_jacket',
      type: 'shirts',
      tags: ['jacket'],
      title: "Men's Quilted Shirt Jacket",
      gender: 'men',
    },

    {
      description:
        "Introducing the Tesla Raven Collection. The Men's Raven Lightweight Zip Up Bomber has a premium, modern silhouette made from a sustainable bamboo cotton blend for versatility in any season. The hoodie features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, a concealed chest pocket with custom matte zipper pulls and a french terry interior. Made from 70% bamboo and 30% cotton.",
      images: ['1740250-00-A_0_2000.jpg', '1740250-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_raven_lightweight_zip_up_bomber_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Raven Lightweight Zip Up Bomber Jacket",
      gender: 'men',
    },

    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Men's Turbine Long Sleeve Tee features a subtle, water-based T logo on the left chest and our Tesla wordmark below the back collar. The lightweight material is double-dyed, creating a soft, casual style for ideal wear in any season. Made from 50% cotton and 50% polyester.",
      images: ['1740280-00-A_0_2000.jpg', '1740280-00-A_1.jpg'],
      stock: 50,
      price: 45,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_turbine_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Turbine Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Men's Turbine Short Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style for ideal wear in any season. Made from 50% cotton and 50% polyester.",
      images: ['1741416-00-A_0_2000.jpg', '1741416-00-A_1.jpg'],
      stock: 50,
      price: 40,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'men_turbine_short_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Turbine Short Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for comfort, the Cybertruck Owl Tee is made from 100% cotton and features our signature Cybertruck icon on the back.',
      images: ['7654393-00-A_2_2000.jpg', '7654393-00-A_3.jpg'],
      stock: 0,
      price: 35,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'men_cybertruck_owl_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Cybertruck Owl Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by our fully integrated home solar and storage system, the Tesla Solar Roof Tee advocates for clean, sustainable energy wherever you go. Designed for fit, comfort and style, the tee features an aerial view of our seamless Solar Roof design on the front with our signature T logo above 'Solar Roof' on the back. Made from 100% Peruvian cotton.",
      images: ['1703767-00-A_0_2000.jpg', '1703767-00-A_1.jpg'],
      stock: 15,
      price: 35,
      sizes: ['S', 'M', 'L', 'XL'],
      slug: 'men_solar_roof_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Solar Roof Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by the world’s most unlimited resource, the Let the Sun Shine Tee highlights our fully integrated home solar and storage system. Designed for fit, comfort and style, the tee features a sunset graphic along with our Tesla wordmark on the front and our signature T logo printed above 'Solar Roof' on the back. Made from 100% Peruvian cotton.",
      images: ['1700280-00-A_0_2000.jpg', '1700280-00-A_1.jpg'],
      stock: 17,
      price: 35,
      sizes: ['XS', 'S', 'XL', 'XXL'],
      slug: 'men_let_the_sun_shine_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Let the Sun Shine Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D Large Wordmark Tee is made from 100% Peruvian cotton with a 3D silicone-printed Tesla wordmark printed across the chest.",
      images: ['8764734-00-A_0_2000.jpg', '8764734-00-A_1.jpg'],
      stock: 12,
      price: 35,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_3d_large_wordmark_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D Large Wordmark Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for fit, comfort and style, the Tesla T Logo Tee is made from 100% Peruvian cotton and features a silicone-printed T Logo on the left chest.',
      images: ['7652426-00-A_0_2000.jpg', '7652426-00-A_1.jpg'],
      stock: 5,
      price: 35,
      sizes: ['XS', 'S'],
      slug: 'men_3d_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D T Logo Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for comfort and style in any size, the Tesla Small Wordmark Tee is made from 100% Peruvian cotton and features a 3D silicone-printed wordmark on the left chest.',
      images: ['8528839-00-A_0_2000.jpg', '8528839-00-A_2.jpg'],
      stock: 2,
      price: 35,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_3d_small_wordmark_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Men’s 3D Small Wordmark Tee',
      gender: 'men',
    },
    {
      description:
        "Designed to celebrate Tesla's incredible performance mode, the Plaid Mode Tee features great fit, comfort and style. Made from 100% cotton, it's the next best thing to riding shotgun at the Nürburgring.",
      images: ['1549268-00-A_0_2000.jpg', '1549268-00-A_2.jpg'],
      stock: 82,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_plaid_mode_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Plaid Mode Tee",
      gender: 'men',
    },
    {
      description:
        "Inspired by our popular home battery, the Tesla Powerwall Tee is made from 100% cotton and features the phrase 'Pure Energy' under our signature logo in the back. Designed for fit, comfort and style, the exclusive tee promotes sustainable energy in any environment.",
      images: ['9877034-00-A_0_2000.jpg', '9877034-00-A_2.jpg'],
      stock: 24,
      price: 35,
      sizes: ['XL', 'XXL'],
      slug: 'men_powerwall_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Powerwall Tee",
      gender: 'men',
    },
    {
      description:
        'Inspired by Tesla Battery Day and featuring the unveiled tabless battery cell, Battery Day Tee celebrates the future of energy storage and cell manufacturing. Designed for fit, comfort and style, Battery Day Tee is made from 100% cotton with a stylized cell printed across the chest. Made in Peru.',
      images: ['1633802-00-A_0_2000.jpg', '1633802-00-A_2.jpg'],
      stock: 5,
      price: 30,
      sizes: ['XS', 'S', 'XXL'],
      slug: 'men_battery_day_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Battery Day Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for exceptional comfort and inspired by the Cybertruck unveil event, the Cybertruck Bulletproof Tee is made from 100% cotton and features our signature Cybertruck icon on the back.',
      images: ['7654399-00-A_0_2000.jpg', '7654399-00-A_1.jpg'],
      stock: 150,
      price: 30,
      sizes: ['M', 'L'],
      slug: 'men_cybertruck_bulletproof_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Men’s Cybertruck Bulletproof Tee',
      gender: 'men',
    },
    {
      description:
        'Inspired by the Model Y order confirmation graphic, the limited edition Haha Yes Tee is designed for comfort and style. Made from 100% Peruvian cotton and featuring the Tesla wordmark across the chest, the exclusive tee will commemorate your order for years to come.',
      images: ['7652410-00-A_0.jpg', '7652410-00-A_1_2000.jpg'],
      stock: 10,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_haha_yes_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Haha Yes Tee",
      gender: 'men',
    },
    {
      description:
        'Designed for fit, comfort and style, the limited edition S3XY Tee is made from 100% cotton with a 3D silicone-printed “S3XY” logo across the chest. Made in Peru. Available in black.',
      images: ['8764600-00-A_0_2000.jpg', '8764600-00-A_2.jpg'],
      stock: 34,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_s3xy_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's S3XY Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D Wordmark Long Sleeve Tee is made from 100% cotton and features an understated wordmark logo on the left chest.",
      images: ['8764813-00-A_0_2000.jpg', '8764813-00-A_1.jpg'],
      stock: 15,
      price: 40,
      sizes: ['XL', 'XXL'],
      slug: 'men_3d_wordmark_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D Wordmark Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Designed for fit, comfort and style, the Men's 3D T Logo Long Sleeve Tee is made from 100% cotton and features an understated T logo on the left chest.",
      images: ['8529198-00-A_0_2000.jpg', '8529198-00-A_1.jpg'],
      stock: 12,
      price: 40,
      sizes: ['XS', 'XXL'],
      slug: 'men_3d_t_logo_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's 3D T Logo Long Sleeve Tee",
      gender: 'men',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Men's Raven Lightweight Hoodie has a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The hoodie features subtle thermoplastic polyurethane Tesla logos across the chest and on the sleeve with a french terry interior for versatility in any season. Made from 70% bamboo and 30% cotton.",
      images: ['1740245-00-A_0_2000.jpg', '1740245-00-A_1.jpg'],
      stock: 10,
      price: 115,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'men_raven_lightweight_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Men's Raven Lightweight Hoodie",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Chill Pullover Hoodie has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The unisex hoodie features subtle thermoplastic polyurethane Tesla logos across the chest and on the sleeve, a double layer single seam hood and pockets with custom matte zipper pulls. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740051-00-A_0_2000.jpg', '1740051-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'chill_pullover_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: 'Chill Pullover Hoodie',
      gender: 'unisex',
    },
    {
      description:
        "Introducing the Tesla Chill Collection. The Men's Chill Full Zip Hoodie has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The hoodie features subtle thermoplastic polyurethane Tesla logos on the left chest and sleeve, a double layer single seam hood and pockets with custom matte zipper pulls. Made from 60% cotton and 40% recycled polyester.",
      images: ['1741111-00-A_0_2000.jpg', '1741111-00-A_1.jpg'],
      stock: 100,
      price: 85,
      sizes: ['XS', 'L', 'XL', 'XXL'],
      slug: 'men_chill_full_zip_hoodie',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Full Zip Hoodie",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Quarter Zip Pullover has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The pullover features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, as well as a custom matte zipper pull. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740140-00-A_0_2000.jpg', '1740140-00-A_1.jpg'],
      stock: 7,
      price: 85,
      sizes: ['XS', 'S', 'M'],
      slug: 'men_chill_quarter_zip_pullover_-_gray',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Quarter Zip Pullover - Gray",
      gender: 'men',
    },
    {
      description:
        'Introducing the Tesla Chill Collection. The Men’s Chill Quarter Zip Pullover has a premium, heavyweight exterior and soft fleece interior for comfort in any season. The pullover features subtle thermoplastic polyurethane Tesla logos on the left chest and below the back collar, as well as a custom matte zipper pull. Made from 60% cotton and 40% recycled polyester.',
      images: ['1740145-00-A_2_2000.jpg', '1740145-00-A_1.jpg'],
      stock: 15,
      price: 85,
      sizes: ['XS', 'S', 'M', 'L'],
      slug: 'men_chill_quarter_zip_pullover_-_white',
      type: 'shirts',
      tags: ['shirt'],
      title: "Men's Chill Quarter Zip Pullover - White",
      gender: 'men',
    },
    {
      description:
        'The Unisex 3D Large Wordmark Pullover Hoodie features soft fleece and an adjustable, jersey-lined hood for comfort and coverage. Designed in a unisex style, the pullover hoodie includes a tone-on-tone 3D silicone-printed wordmark across the chest.',
      images: ['8529107-00-A_0_2000.jpg', '8529107-00-A_1.jpg'],
      stock: 15,
      price: 70,
      sizes: ['XS', 'S', 'XL', 'XXL'],
      slug: '3d_large_wordmark_pullover_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: '3D Large Wordmark Pullover Hoodie',
      gender: 'unisex',
    },
    {
      description:
        'As with the iconic Tesla logo, the Cybertruck Graffiti Hoodie is a classic in the making. Unisex style featuring soft fleece and an adjustable, jersey-lined hood for comfortable coverage.',
      images: ['7654420-00-A_0_2000.jpg', '7654420-00-A_1_2000.jpg'],
      stock: 13,
      price: 60,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'cybertruck_graffiti_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: 'Cybertruck Graffiti Hoodie',
      gender: 'unisex',
    },
    {
      description:
        'The Relaxed T Logo Hat is a classic silhouette combined with modern details, featuring a 3D T logo and a custom metal buckle closure. The ultrasoft design is flexible and abrasion resistant, while the inner sweatband includes quilted padding for extra comfort and moisture wicking. The visor is fully made from recycled plastic bottles. 100% Cotton.',
      images: ['1657932-00-A_0_2000.jpg', '1657932-00-A_1.jpg'],
      stock: 11,
      price: 30,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'relaxed_t_logo_hat',
      type: 'hats',
      tags: ['hats'],
      title: 'Relaxed T Logo Hat',
      gender: 'unisex',
    },
    {
      description:
        'The Relaxed T Logo Hat is a classic silhouette combined with modern details, featuring a 3D T logo and a custom metal buckle closure. The ultrasoft design is flexible and abrasion resistant, while the inner sweatband includes quilted padding for extra comfort and moisture wicking. The visor is fully made from recycled plastic bottles. 100% Cotton.',
      images: ['1740417-00-A_0_2000.jpg', '1740417-00-A_1.jpg'],
      stock: 13,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'thermal_cuffed_beanie',
      type: 'hats',
      tags: ['hats'],
      title: 'Thermal Cuffed Beanie',
      gender: 'unisex',
    },
    {
      description:
        "The Women's Cropped Puffer Jacket features a uniquely cropped silhouette for the perfect, modern style while on the go during the cozy season ahead. The puffer features subtle silicone injected Tesla logos below the back collar and on the right sleeve, custom matte metal zipper pulls and a soft, fleece lined collar. Made from 87% nylon and 13% polyurethane.",
      images: ['1740535-00-A_0_2000.jpg', '1740535-00-A_1.jpg'],
      stock: 85,
      price: 225,
      sizes: ['XS', 'S', 'M'],
      slug: 'women_cropped_puffer_jacket',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Cropped Puffer Jacket",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Chill Collection. The Women's Chill Half Zip Cropped Hoodie has a premium, soft fleece exterior and cropped silhouette for comfort in everyday lifestyle. The hoodie features an elastic hem that gathers at the waist, subtle thermoplastic polyurethane Tesla logos along the hood and on the sleeve, a double layer single seam hood and a custom ring zipper pull. Made from 60% cotton and 40% recycled polyester.",
      images: ['1740226-00-A_0_2000.jpg', '1740226-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'XXL'],
      slug: 'women_chill_half_zip_cropped_hoodie',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Chill Half Zip Cropped Hoodie",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Women's Raven Slouchy Crew Sweatshirt has a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The slouchy crew features a subtle thermoplastic polyurethane Tesla wordmark on the left sleeve and a french terry interior for a cozy look and feel in every season. Pair it with your Raven Joggers or favorite on the go fit. Made from 70% bamboo and 30% cotton.",
      images: ['1740260-00-A_0_2000.jpg', '1740260-00-A_1.jpg'],
      stock: 9,
      price: 110,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_raven_slouchy_crew_sweatshirt',
      type: 'hoodies',
      tags: ['hoodie'],
      title: "Women's Raven Slouchy Crew Sweatshirt",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Women's Turbine Cropped Long Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style with a cropped silhouette. Made from 50% cotton and 50%",
      images: ['1740290-00-A_0_2000.jpg', '1740290-00-A_1.jpg'],
      stock: 10,
      price: 45,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_turbine_cropped_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Turbine Cropped Long Sleeve Tee",
      gender: 'women',
    },
    {
      description:
        "ntroducing the Tesla Turbine Collection. Designed for style, comfort and everyday lifestyle, the Women's Turbine Cropped Short Sleeve Tee features a subtle, water-based Tesla wordmark across the chest and our T logo below the back collar. The lightweight material is double-dyed, creating a soft, casual style with a cropped silhouette. Made from 50% cotton and 50% polyester.",
      images: ['1741441-00-A_0_2000.jpg', '1741441-00-A_1.jpg'],
      stock: 0,
      price: 40,
      sizes: ['XS', 'S'],
      slug: 'women_turbine_cropped_short_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Turbine Cropped Short Sleeve Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the ultrasoft Women's T Logo Short Sleeve Scoop Neck Tee features a tonal 3D silicone-printed T logo on the left chest. Made of 50% Peruvian cotton and 50% Peruvian viscose.",
      images: ['8765090-00-A_0_2000.jpg', '8765090-00-A_1.jpg'],
      stock: 30,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_t_logo_short_sleeve_scoop_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's T Logo Short Sleeve Scoop Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the ultrasoft Women's T Logo Long Sleeve Scoop Neck Tee features a tonal 3D silicone-printed T logo on the left chest. Made of 50% Peruvian cotton and 50% Peruvian viscose.",
      images: ['8765100-00-A_0_2000.jpg', '8765100-00-A_1.jpg'],
      stock: 16,
      price: 40,
      sizes: ['XS', 'S', 'L', 'XL', 'XXL'],
      slug: 'women_t_logo_long_sleeve_scoop_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's T Logo Long Sleeve Scoop Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the Women's Small Wordmark Short Sleeve V-Neck Tee features a tonal 3D silicone-printed wordmark on the left chest. Made of 100% Peruvian cotton.",
      images: ['8765120-00-A_0_2000.jpg', '8765120-00-A_1.jpg'],
      stock: 18,
      price: 35,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_small_wordmark_short_sleeve_v-neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Small Wordmark Short Sleeve V-Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed for style and comfort, the Women's Large Wordmark Short Sleeve Crew Neck Tee features a tonal 3D silicone-printed wordmark across the chest. Made of 100% Peruvian pima cotton.",
      images: ['8765115-00-A_0_2000.jpg', '8765115-00-A_1.jpg'],
      stock: 5,
      price: 35,
      sizes: ['XL', 'XXL'],
      slug: 'women_large_wordmark_short_sleeve_crew_neck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Large Wordmark Short Sleeve Crew Neck Tee",
      gender: 'women',
    },
    {
      description:
        "Designed to celebrate Tesla's incredible performance mode, the Plaid Mode Tee features great fit, comfort and style. Made from 100% cotton, it's the next best thing to riding shotgun at the Nürburgring.",
      images: ['1549275-00-A_0_2000.jpg', '1549275-00-A_1.jpg'],
      stock: 16,
      price: 35,
      sizes: ['S', 'M'],
      slug: 'women_plaid_mode_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Plaid Mode Tee",
      gender: 'women',
    },
    {
      description:
        "Inspired by our popular home battery, the Tesla Powerwall Tee is made from 100% cotton and features the phrase 'Pure Energy' under our signature logo in the back. Designed for fit, comfort and style, the exclusive tee promotes sustainable energy in any",
      images: ['9877040-00-A_0_2000.jpg', '9877040-00-A_1.jpg'],
      stock: 10,
      price: 130,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_powerwall_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Women’s Powerwall Tee',
      gender: 'women',
    },
    {
      description:
        "Fully customized and uniquely styled, the Women's Corp Jacket features a silicone-printed 'T' logo on the left chest and prominent Tesla wordmark across the back.",
      images: ['5645680-00-A_0_2000.jpg', '5645680-00-A_3.jpg'],
      stock: 3,
      price: 90,
      sizes: ['M', 'L', 'XL', 'XXL'],
      slug: 'women_corp_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Corp Jacket",
      gender: 'women',
    },
    {
      description:
        "Introducing the Tesla Raven Collection. The Women's Raven Joggers have a premium, relaxed silhouette made from a sustainable bamboo cotton blend. The joggers feature a subtle thermoplastic polyurethane Tesla wordmark and T logo and a french terry interior for a cozy look and feel in every season. Pair them with your Raven Slouchy Crew Sweatshirt, Raven Lightweight Zip Up Jacket or other favorite on the go fit. Made from 70% bamboo and 30% cotton.",
      images: ['1740270-00-A_0_2000.jpg', '1740270-00-A_1.jpg'],
      stock: 162,
      price: 100,
      sizes: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
      slug: 'women_raven_joggers',
      type: 'shirts',
      tags: ['shirt'],
      title: "Women's Raven Joggers",
      gender: 'women',
    },
    {
      description:
        'Designed for fit, comfort and style, the Kids Cybertruck Graffiti Long Sleeve Tee features a water-based Cybertruck graffiti wordmark across the chest, a Tesla wordmark down the left arm and our signature T logo on the back collar. Made from 50% cotton and 50% polyester.',
      images: ['1742694-00-A_1_2000.jpg', '1742694-00-A_3.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cybertruck_long_sleeve_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cybertruck Long Sleeve Tee',
      gender: 'kid',
    },
    {
      description:
        'The Kids Scribble T Logo Tee is made from 100% Peruvian cotton and features a Tesla T sketched logo for every young artist to wear.',
      images: ['8529312-00-A_0_2000.jpg', '8529312-00-A_1.jpg'],
      stock: 0,
      price: 25,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_scribble_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Scribble T Logo Tee',
      gender: 'kid',
    },
    {
      description:
        'The Kids Cybertruck Tee features the iconic Cybertruck graffiti wordmark and is made from 100% Peruvian cotton for maximum comfort.',
      images: ['8529342-00-A_0_2000.jpg', '8529342-00-A_1.jpg'],
      stock: 10,
      price: 25,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cybertruck_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cybertruck Tee',
      gender: 'kid',
    },
    {
      description:
        "The refreshed Kids Racing Stripe Tee is made from 100% Peruvian cotton, featuring a newly enhanced racing stripe with a brushed Tesla wordmark that's perfect for any speed racer.",
      images: ['8529354-00-A_0_2000.jpg', '8529354-00-A_1.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_racing_stripe_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Racing Stripe Tee',
      gender: 'kid',
    },
    {
      description:
        'Designed for fit, comfort and style, the Tesla T Logo Tee is made from 100% Peruvian cotton and features a silicone-printed T Logo on the left chest.',
      images: ['7652465-00-A_0_2000.jpg', '7652465-00-A_1.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_3d_t_logo_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids 3D T Logo Tee',
      gender: 'kid',
    },
    {
      description:
        'The checkered tee is made from long grain, GMO free Peruvian cotton. Peru is the only country in the world where cotton is picked by hand on a large scale. The 4,500-year-old tradition prevents damage to the fiber during the picking process and removes the need to use chemicals to open the cotton plants before harvest. This environmentally friendly process results in cotton that is soft, strong, and lustrous – and the tee will get even softer with every wash.',
      images: ['100042307_0_2000.jpg', '100042307_alt_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_checkered_tee',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Checkered Tee',
      gender: 'kid',
    },
    {
      description:
        'For the future space traveler with discerning taste, a soft, cotton onesie with snap closure bottom. Clear labeling provided in case of contact with a new spacefaring civilization. 100% Cotton. Made in Peru',
      images: ['1473809-00-A_1_2000.jpg', '1473809-00-A_alt.jpg'],
      stock: 16,
      price: 25,
      sizes: ['XS', 'S'],
      slug: 'made_on_earth_by_humans_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Made on Earth by Humans Onesie',
      gender: 'kid',
    },
    {
      description:
        'The Kids Scribble T Logo Onesie is made from 100% Peruvian cotton and features a Tesla T sketched logo for every little artist to wear.',
      images: ['8529387-00-A_0_2000.jpg', '8529387-00-A_1.jpg'],
      stock: 0,
      price: 30,
      sizes: ['XS', 'S'],
      slug: 'scribble_t_logo_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Scribble T Logo Onesie',
      gender: 'kid',
    },
    {
      description:
        'Show your commitment to sustainable energy with this cheeky onesie for your young one. Note: Does not prevent emissions. 100% Cotton. Made in Peru.',
      images: ['1473834-00-A_2_2000.jpg', '1473829-00-A_2_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S'],
      slug: 'zero_emissions_(almost)_onesie',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Zero Emissions (Almost) Onesie',
      gender: 'kid',
    },
    {
      description:
        'Wear your Kids Cyberquad Bomber Jacket during your adventures on Cyberquad for Kids. The bomber jacket features a graffiti-style illustration of our Cyberquad silhouette and wordmark. With three zippered pockets and our signature T logo and Tesla wordmark printed along the sleeves, Kids Cyberquad Bomber Jacket is perfect for wherever the trail takes you. Made from 60% cotton and 40% polyester.',
      images: ['1742702-00-A_0_2000.jpg', '1742702-00-A_1.jpg'],
      stock: 10,
      price: 65,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_cyberquad_bomber_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Cyberquad Bomber Jacket',
      gender: 'kid',
    },
    {
      description:
        'Cruise the playground in style with the Kids Corp Jacket. Modeled after the original Tesla Corp Jacket, the Kids Corp Jacket features the same understated style and high-quality materials but at a pint-sized scale.',
      images: ['1506211-00-A_0_2000.jpg', '1506211-00-A_1_2000.jpg'],
      stock: 10,
      price: 30,
      sizes: ['XS', 'S', 'M'],
      slug: 'kids_corp_jacket',
      type: 'shirts',
      tags: ['shirt'],
      title: 'Kids Corp Jacket',
      gender: 'kid',
    },
  ],
};



** Check AuthStatus

HAcer el seguimiento al token

- Crear una funcion que genere un nuevo token en el servicio de auth

  async checkAuthStatus(user: User){

    return {
      ...user,
      token: this.getJwtToken({id: user.id})
    }

  }


- Creamos el endpoint en el controlador



@Get('check-status')
@Auth()
checkAuthStatus(
  @GetUser() user: User
){
  return this.authService.checkAuthStatus(user);
}


- probar la tuta en insomnia

http://localhost:3000/api/auth/check-status





